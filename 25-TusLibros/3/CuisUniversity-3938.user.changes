

----STARTUP---- (4 November 2019 19:06:42) as /home/tcarreira/Downloads/linux64/CuisUniversity-3938.image!


----End fileIn of /home/tcarreira/Documents/2019-2c/25-TusLibros/Iteracion1/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 19:07:28'!
PASSED!

TestCase subclass: #CashierForSale	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/4/2019 19:10:52'!
TestCase subclass: #CashierForSale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierForSaleTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/4/2019 19:11:01'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierForSale stamp: 'TCM 11/4/2019 19:11:09'!
TestCase subclass: #CashierForSale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CashierForSale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/4/2019 19:11:25'!
Object subclass: #CashierForSale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'nil' stamp: 'TCM 11/4/2019 19:12:15'!
test01EmptyCartCannotCheckout

		| aCart |
	aCart := Cart new.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:14:01' prior: 50777610!
test01EmptyCartCannotCheckout

		| aCart |
	aCart := Cart new.
	
	self 
		should: [ CashierForSale for: aCart ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: CashierForSale .
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:14:28' prior: 50777616!
test01EmptyCartCannotCheckout

		| aCart |
	aCart := Cart new.
	
	self 
		should: [ CashierForSale for: aCart ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: CashierForSale emptyCartErrorMessage .
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:14:56' prior: 50777626!
test01EmptyCartCannotCheckout

		| aCart |
	aCart := Cart new.
	
	self 
		should: [ CashierForSale for: aCart ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:14:57'!
ERROR!

----SNAPSHOT----(4 November 2019 19:15:18) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (4 November 2019 19:18:39) as /home/tcarreira/Downloads/linux64/CuisUniversity-3938.image!

!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:18:51' prior: 50777636!
test01EmptyCartCannotCheckout

	| aCart |
	aCart := Cart new.

	self 
		should: [ CashierForSale for: aCart ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:18:52'!
ERROR!
!CashierForSale class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 19:19:12'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!CashierForSale class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 19:19:40' prior: 50777669!
emptyCartErrorMessage
	^ 'No se puede crear un cajero para un carrito vacio'.! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:19:43'!
ERROR!
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 19:19:53'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 19:20:03' prior: 50777683!
for: aCart
	^self new initializeFor: aCart ! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:20:07'!
ERROR!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/4/2019 19:20:28'!
Object subclass: #CashierForSale
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/4/2019 19:20:28'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/4/2019 19:20:34' prior: 50777706!
initializeFor: aCart
	cart := aCart.! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:20:36'!
FAILURE!
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 19:22:06' prior: 50777691!
for: aCart
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart ! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:22:08'!
ERROR!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:23:25' prior: 50777656!
test01EmptyCartCannotCheckout

	| aCart |
	aCart := Cart acceptingItemsOf: #().

	self 
		should: [ CashierForSale for: aCart ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:23:28'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:23:28'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:26:05'!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart |
	aCart := Cart acceptingItemsOf: (Dictionary with: 'ElLaberintoDelFauno' -> 123 * peso).
	
	CashierForSale for: aCart.
	self 
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:27:28' prior: 50777747!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook|
	
	aBook := 'ElLaberintoDelFauno'.
	
	aCart := Cart acceptingItemsOf: (Dictionary with: aBook -> 123 * peso).
	
	aCart add: aBook.
	
	CashierForSale for: aCart.
	self 
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:27:52' prior: 50777760!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook|
	
	aBook := 'ElLaberintoDelFauno'.
	
	aCart := Cart acceptingItemsOf: (Dictionary with: aBook -> 123 * peso).
	
	aCart add: aBook.
	
	(CashierForSale for: aCart) checkout.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:28:30' prior: 50777775!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook |
	
	aBook := 'ElLaberintoDelFauno'.
	
	salesBook := OrderedCollection new.	
	aCart := Cart acceptingItemsOf: (Dictionary with: aBook -> 123 * peso).
	
	aCart add: aBook.
	
	(CashierForSale for: aCart) checkout.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:34:15' prior: 50777786!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := 'ElLaberintoDelFauno'.
	
	salesBook := OrderedCollection new.
	pricesList := (Dictionary with: aBook -> 123 * peso).
	aCart := Cart acceptingItemsOf: pricesList.
	
	aCart add: aBook.

	(CashierForSale for: aCart) checkout.

	salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:35:08' prior: 50777799!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := 'ElLaberintoDelFauno'.
	pricesList := (Dictionary with: aBook -> 123 * peso).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:35:36'!
ERROR!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:35:53' prior: 50777814!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := 'ElLaberintoDelFauno'.
	pricesList := (Dictionary with: aBook -> (123 * peso)).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:35:54'!
ERROR!

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]!
!Cart methodsFor: 'assertions' stamp: 'TCM 11/4/2019 19:37:20' prior: 50777381!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:37:24'!
ERROR!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:37:33'!
checkout
	self shouldBeImplemented.! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 19:39:05'!
for: aCart registerIn: aSalesBook 
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:39:05' prior: 50777833!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := 'ElLaberintoDelFauno'.
	pricesList := (Dictionary with: aBook -> (123 * peso)).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:39:05' prior: 50777730!
test01EmptyCartCannotCheckout

	| aCart |
	aCart := Cart acceptingItemsOf: #().

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !

!methodRemoval: CashierForSale class #for: stamp: 'TCM 11/4/2019 19:39:05'!
for: aCart
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart !
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/4/2019 19:39:56'!
initializeFor: aCart registerIn: aSalesBook 
	cart := aCart.! !
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:39:56' prior: 50777868!
for: aCart registerIn: aSalesBook 
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook ! !

!methodRemoval: CashierForSale #initializeFor: stamp: 'TCM 11/4/2019 19:39:56'!
initializeFor: aCart
	cart := aCart.!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/4/2019 19:40:07'!
Object subclass: #CashierForSale
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/4/2019 19:40:05' prior: 50777909!
initializeFor: aCart registerIn: aSalesBook 
	cart := aCart.
	salesBook := aSalesBook! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:40:31' prior: 50777892!
test01EmptyCartCannotCheckout

	| aCart salesBook |
	aCart := Cart acceptingItemsOf: #().
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .
		
	
	
! !

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:40:47'!
ERROR!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:41:08' prior: 50777864!
checkout
	salesBook add: cart! !

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:41:12'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:41:12'!
PASSED!

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:41:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 19:41:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 19:41:16'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 19:41:16'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 19:41:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 19:41:16'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 19:41:16'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 19:41:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 19:41:16'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'TCM 11/4/2019 19:42:38' prior: 50777533!
defaultCatalog
	
	^ Dictionary with: self itemSellByTheStore -> (50 * peso)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 19:42:39'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:44:16' prior: 50777876!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := 'ElLaberintoDelFauno'.
	pricesList := (Dictionary with: aBook -> (123 * peso)).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:44:39'!
itemSellByTheStore

	^ 'ElLaberintoDelFauno'! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:44:39' prior: 50778029!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := (Dictionary with: aBook -> (123 * peso)).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:44:59' prior: 50778049!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := (Dictionary with: self itemSellByTheStore -> (123 * peso)).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:45:14' prior: 50778065!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := Dictionary with: self itemSellByTheStore -> (123 * peso).

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:45:34'!
priceListWithItem

	^ Dictionary with: self itemSellByTheStore -> (123 * peso)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:45:35' prior: 50778082!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:46:52' prior: 50777940!
test01EmptyCartCannotCheckout

	| aCart salesBook |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:46:53'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 19:46:53'!
PASSED!

!testRun: #CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:46:53'!
PASSED!

Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 19:48:19'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:53:19'!
test9CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !

!methodRemoval: CashierForSaleTest #test02CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 19:53:19'!
test02CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook) checkout.

	self assert: salesBook includes: aCart

		
	
	
!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:55:36' prior: 50778119!
test01EmptyCartCannotCheckout

	| creditCard |
	creditCard := CreditCard withNumber: '1234' expirationDate: (GregorianMonthOfYear octoberOf: 1997).! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:57:45' prior: 50778185!
test01EmptyCartCannotCheckout


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: (GregorianMonthOfYear octoberOf: 1997). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:58:47'!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: (GregorianMonthOfYear octoberOf: 1997). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 19:46:52' prior: 50778193!
test01EmptyCartCannotCheckout

	| aCart salesBook |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 19:59:19'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 19:59:38'!
invalidNumberErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 19:59:54' prior: 50778234!
invalidNumberErrorMessage
	^ 'El numero es invalido'! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 19:59:57'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:00:15'!
withNumber: aString expirationDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:01:57' prior: 50778248!
withNumber: aString expirationDate: aGregorianMonthOfYear
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:02:31'!
withNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:02:31' prior: 50778204!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: (GregorianMonthOfYear octoberOf: 1997) holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !

!methodRemoval: CreditCard class #withNumber:expirationDate: stamp: 'TCM 11/4/2019 20:02:31'!
withNumber: aString expirationDate: aGregorianMonthOfYear
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:02:54' prior: 50778266!
withNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:03:00' prior: 50778295!
withNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:03:13' prior: 50778304!
withNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	^self new initializeWithNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:03:22'!
ERROR!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:03:22'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 20:03:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 20:03:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'string gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 20:03:30'!
Object subclass: #CreditCard
	instanceVariableNames: 'string gregorianMonthOfYear name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:03:30'!
initializeWithNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	self shouldBeImplemented.
	string := aString.
	gregorianMonthOfYear := aGregorianMonthOfYear.
	name := aName.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 20:03:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'string gregorianMonthOfYear name number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/4/2019 20:04:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'string gregorianMonthOfYear name number expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:03:58' prior: 50778351!
initializeWithNumber: aString expirationDate: aGregorianMonthOfYear holderName: aName 
	number := aString.
	expiration := aGregorianMonthOfYear.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:04:08' prior: 50778377!
initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	number := aCreditCardNumber.
	expiration := aGregorianMonthOfYear.
	name := aName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:04:24' prior: 50778313!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:04:35'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:06:29' prior: 50778394!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	aCreditCardNumber length = 16 ifFalse: [ self error: self invalidNumberErrorMessage ].
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:06:33'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:06:44' prior: 50778408!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	aCreditCardNumber size = 16 ifFalse: [ self error: self invalidNumberErrorMessage ].
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:06:45'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:06:45'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:06:45'!
PASSED!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:06:45'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:08:09' prior: 50778275!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 1997)) holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:08:42'!
expirationDate

	^ GregorianMonthOfYear octoberOf: (GregorianYear number: 1997)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:08:42' prior: 50778451!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: (self expirationDate) holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:08:53' prior: 50778470!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: self expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:09:01'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:10:24'!
test03CreditCardCreationWithLettersFails

	self 
		should: [ CreditCard withNumber: '12q4567890123456' expirationDate: self expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:10:26'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:13:02' prior: 50778424!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	(aCreditCardNumber size = 16 or: [ aCreditCardNumber allSatisfy: [ :char | char isDigit ]])
		ifFalse: [ self error: self invalidNumberErrorMessage ].
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName
! !

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:13:04'!
FAILURE!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:13:22'!
FAILURE!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:13:45'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:14:09' prior: 50778513!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	(aCreditCardNumber size = 16 and: [ aCreditCardNumber allSatisfy: [ :char | char isDigit ]])
		ifFalse: [ self error: self invalidNumberErrorMessage ].
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName
! !

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:14:12'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:14:12'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:14:12'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:14:12'!
PASSED!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:14:12'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:16:14'!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '12q4567890123456' expirationDate: self expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:16:32' prior: 50778570!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '12q4567890123456' expirationDate: self expirationDate holderName: 'PIRULO 12'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:16:35'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:16:42' prior: 50778582!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO 12'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:16:43'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:18:13' prior: 50778538!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	(aCreditCardNumber size = 16 and: [ aCreditCardNumber allSatisfy: [ :char | char isDigit ]])
		ifFalse: [ self error: self invalidNumberErrorMessage ].
	aName allSatisfy:   [ :char | char isLetter or: char isSpace ] .
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:18:21' prior: 50778632!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	(aCreditCardNumber size = 16 and: [ aCreditCardNumber allSatisfy: [ :char | char isDigit ]])
		ifFalse: [ self error: self invalidNumberErrorMessage ].
	aName allSatisfy:   [ :char | char isLetter or: char isSpace ].

	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:18:23'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:18:23'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:18:23'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:18:23'!
ERROR!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:18:23'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:18:23'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:20:11' prior: 50778649!
withNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName 
	(aCreditCardNumber size = 16 and: [ aCreditCardNumber allSatisfy: [ :char | char isDigit ]])
		ifFalse: [ self error: self invalidNumberErrorMessage ].
	(aName allSatisfy:   [ :char | char isLetter or: char isSeparator ]) ifFalse: [ self error: self invalidHolderNameErrorMessage ] .

	^self new initializeWithNumber: aCreditCardNumber expirationDate: aGregorianMonthOfYear holderName: aName
! !

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:20:41'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 20:20:55'!
invalidHolderNameErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'TCM 11/4/2019 20:21:24' prior: 50778709!
invalidHolderNameErrorMessage
	^ 'El nombre del titular solo puede tener letras y caracteres en blanco'! !

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:21:27'!
FAILURE!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:21:42' prior: 50778616!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO 12'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidHolderNameErrorMessage .
		

	
	! !

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:21:43'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:24:02' prior: 50778216!
test01EmptyCartCannotCheckout

	| aCart salesBook creditCard |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard .
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:24:39' prior: 50778759!
test01EmptyCartCannotCheckout

	| aCart salesBook creditCard |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:24:54' prior: 50778775!
test01EmptyCartCannotCheckout

	| aCart salesBook creditCard |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:25:04' prior: 50778794!
test01EmptyCartCannotCheckout

	| aCart salesBook creditCard |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:27:32' prior: 50777915!
for: aCart registerIn: aSalesBook 
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook ! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/4/2019 20:28:28'!
for: aCart registerIn: aSalesBook payingWith: aCreditCard  
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:28:28' prior: 50778154!
test9CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:28:28' prior: 50778813!
test01EmptyCartCannotCheckout

	| aCart salesBook creditCard |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

!methodRemoval: CashierForSale class #for:registerIn: stamp: 'TCM 11/4/2019 20:28:28'!
for: aCart registerIn: aSalesBook 
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook !
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:29:19'!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard  
	cart := aCart.
	salesBook := aSalesBook! !
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:29:19' prior: 50778840!
for: aCart registerIn: aSalesBook payingWith: aCreditCard  
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard ! !

!methodRemoval: CashierForSale #initializeFor:registerIn: stamp: 'TCM 11/4/2019 20:29:19'!
initializeFor: aCart registerIn: aSalesBook 
	cart := aCart.
	salesBook := aSalesBook!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

!testRun: #CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:29:30'!
PASSED!

----SNAPSHOT----(4 November 2019 20:30:08) CuisUniversity-3938.image priorSource: 14271939!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:30:41'!
test5CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !

!methodRemoval: CashierForSaleTest #test9CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:30:41'!
test9CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: aCart

		
	
	
!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:30:58'!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: aCart

		
	
	
! !

!methodRemoval: CashierForSaleTest #test5CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:30:58'!
test5CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: aCart

		
	
	
!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:31:48' prior: 50778866!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/4/2019 20:31:48'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:31:58' prior: 50779003!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	

	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:32:07'!
setUp
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
		
	
	
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 20:32:09'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 20:32:09'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 20:32:09'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 20:32:09'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:32:09'!
PASSED!

Object subclass: #Ticket
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: #TusLibros stamp: 'TCM 11/4/2019 20:39:25'!
Object subclass: #Ticket
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket class methodsFor: 'no messages' stamp: 'TCM 11/4/2019 20:40:33'!
for: aCart
	aCart itemsDo: [
		
	]! !

bag := Bag new.!

bag add: 234.!

bag count:  234!

bag!

bag ocurrencesOf: 234.!

bag occurrencesOf: 234.!

bag add: 234.!

bag occurrencesOf: 234.!
!Cart methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:43:14' prior: 50777394!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'TCM 11/4/2019 20:44:11' prior: 50777412!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 20:44:29'!
PASSED!

bag collect: [ :each | each]!

bag asSet collect: [ :each | each]!

bag sortedCounts !

bag collect: []!
!Cart methodsFor: 'queries' stamp: 'TCM 11/4/2019 20:47:53'!
itemsDo: aBlock
	
	items sortedCounts do: aBlock.! !
!Cart methodsFor: 'queries' stamp: 'TCM 11/4/2019 20:48:36' prior: 50779131!
itemsDo: aBlock
	
	items sortedCounts do: [:association | aBlock value: association  key value: association  value] .! !
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:49:50'!
test09ItemsDoOfEmptyCartDoesNothing

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].! !

!testRun: #CartTest #test09ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:49:52'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:50:28'!
test10ItemsDoOfEmptyCartDoesNothing

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].! !

!methodRemoval: CartTest #test09ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:50:28'!
test09ItemsDoOfEmptyCartDoesNothing

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].!
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:50:33'!
test9ItemsDoOfEmptyCartDoesNothing

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].! !
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:50:56'!
test09ItemsDoOfCardWithITemsVisitsThem

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].! !

!methodRemoval: CartTest #test9ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:50:56'!
test9ItemsDoOfEmptyCartDoesNothing

	| cart |
	
	cart := self createCart.
	
	
	cart itemsDo:  [ :anItem :aQuantity | self fail ].!
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:53:23' prior: 50779201!
test09ItemsDoOfCardWithITemsVisitsThem

	| cart expected result |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	
	result := Bag new.
	
	expected := Bag add: self itemNotSellByTheStore  	
	cart itemsDo:  [ :anItem :aQuantity | 
	
	].! !
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:53:40' prior: 50779215!
test09ItemsDoOfCardWithITemsVisitsThem

	| cart expected result |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	
	result := Bag new.
	
	expected := Bag add: self itemSellByTheStore.  	
	cart itemsDo:  [ :anItem :aQuantity | 
	
	].! !
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:55:38' prior: 50779226!
test09ItemsDoOfCardWithITemsVisitsThem

	| cart expected result |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	
	result := Bag new.
	
	expected := Bag new add: self itemSellByTheStore withOccurrences: 2.
 
	cart itemsDo:  [ :anItem :aQuantity | 
		result add: anItem withOccurrences: aQuantity.
	].

	self assert: expected equals: result! !

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/4/2019 20:55:39'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'TCM 11/4/2019 20:56:25' prior: 50779136!
itemsDo: aBlock
	
	items sortedCounts do: [:association | aBlock value: association  value value: association  key] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/4/2019 20:56:29'!
FAILURE!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:56:29'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/4/2019 20:56:29'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'TCM 11/4/2019 20:56:54' prior: 50779237!
test09ItemsDoOfCardWithITemsVisitsThem

	| cart expected result |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	
	result := Bag new.
	
	expected := Bag new add: self itemSellByTheStore withOccurrences: 2; yourself.
 
	cart itemsDo:  [ :anItem :aQuantity | 
		result add: anItem withOccurrences: aQuantity.
	].

	self assert: expected equals: result! !

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/4/2019 20:56:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/4/2019 20:57:04'!
PASSED!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:57:48' prior: 50777957!
checkout
	salesBook add: (Ticket for: cart)! !
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:58:19' prior: 50779347!
checkout
	^ salesBook add: (Ticket for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:58:57' prior: 50778971!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Ticket for: aCart).

		
	
	
! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:58:57'!
ERROR!
!Ticket class methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 20:59:31' prior: 50779081!
for: aCart
	^ self new initializeFor: aCart.! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 20:59:35'!
ERROR!

!classDefinition: #Ticket category: #TusLibros stamp: 'TCM 11/4/2019 20:59:48'!
Object subclass: #Ticket
	instanceVariableNames: 'elements cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'TCM 11/4/2019 20:59:48'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!Ticket methodsFor: 'initialization' stamp: 'TCM 11/4/2019 21:03:12' prior: 50779392!
initializeFor: aCart 
	elements := OrderedCollection  new.
	
	aCart itemsDo: [  :anItem :aQuantity |
		elements add: (Array with: anItem with: aQuantity  with: (aCart priceOf: anItem) )
	].! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:04:09'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 21:04:23'!
priceOf: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 21:05:06' prior: 50779409!
priceOf: anItem 
	^ catalog  at: anItem.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'TCM 11/4/2019 21:05:15' prior: 50779414!
priceOf: anItem 
	^ 0! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:23'!
FAILURE!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:34'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 21:05:34'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 21:05:34'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 21:05:34'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 21:05:34'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:34'!
FAILURE!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:34'!
FAILURE!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:37'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:05:56'!
FAILURE!
!Ticket methodsFor: 'initialization' stamp: 'TCM 11/4/2019 21:06:42'!
= aTicket
	^ elements = aTicket elements.! !
!Ticket methodsFor: 'initialization' stamp: 'TCM 11/4/2019 21:06:56'!
elements
	^ elements! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/4/2019 21:07:28'!
PASSED!

----SNAPSHOT----(4 November 2019 21:08:26) CuisUniversity-3938.image priorSource: 14313108!

----QUIT----(4 November 2019 21:10:29) CuisUniversity-3938.image priorSource: 14330793!

----STARTUP---- (5 November 2019 17:14:49) as /home/tcarreira/Downloads/linux64/CuisUniversity-3938.image!

!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:17:07' prior: 50779352!
checkout
	^ salesBook add: (Purchase for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:17:07' prior: 50779357!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).

		
	
	
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:17:22'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:17:22'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:17:22'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:17:22'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:17:22'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:18:40' prior: 50779503!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 5 equals: (Purchase for: aCart) totalSpent.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:19:06' prior: 50779538!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:19:09'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:19:34'!
totalSpent
	self shouldBeImplemented.! !
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:21:50' prior: 50779578!
totalSpent
	^ elements inject: 0 into: [ :acc :elem | acc + elem at: 3 ]! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:22:03'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:22:03'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:22:03'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:22:03'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:22:03'!
ERROR!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:22:03'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:22:25' prior: 50779583!
totalSpent
	^ elements inject: 0 into: [ :acc :elem | acc + (elem at: 3) ]! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:22:27'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:23:10' prior: 50779419!
priceOf: anItem 
	^ catalog at: anItem! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:23:18'!
FAILURE!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:23:18'!
FAILURE!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:23:32' prior: 50779557!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:23:34'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!

!testRun: #CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:23:36'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:26:14'!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSaleTest #test05CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:26:14'!
test05CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:27:32'!
test05IsExpiredOnExpiredCardReturnsTrue

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:30:00' prior: 50779711!
test05IsExpiredOnExpiredCardReturnsTrue

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self assert: expiredCreditCard

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:30:41' prior: 50779730!
test05IsExpiredOnExpiredCardReturnsTrue

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self assert: (expiredCreditCard isExpiredOn: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2019)))
! !

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:30:43'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:30:50'!
isExpiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:30:54' prior: 50779759!
isExpiredOn: aGregorianMonthOfYear 
	^ true! !

	^ true!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:30:57'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:31:33'!
test06IsExpiredOnNotExpiredCardReturnsFalse

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2019)))
! !

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:31:34'!
FAILURE!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:37:04' prior: 50779795!
test06IsExpiredOnNotExpiredCardReturnsFalse

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 10 dayNumber: 2))! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:37:35' prior: 50779742!
test05IsExpiredOnExpiredCardReturnsTrue

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self assert: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 11 dayNumber: 2))
! !

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:37:37'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:37:37'!
FAILURE!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:37:38'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:37:38'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:38:45' prior: 50779765!
isExpiredOn: aFixedGregorianDate
	^ expiration < aFixedGregorianDate monthOfYear .! !

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:38:48'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:38:52'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:38:57'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:39:34'!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 10 dayNumber: 2))! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:42:06' prior: 50779942!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 10 dayNumber: 2)).
	
	
	
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.! !
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:21'!
checkout: aDate
	^ salesBook add: (Purchase for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:21' prior: 50779957!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 10 dayNumber: 2)).
	
	
	
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout: aDate.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:21' prior: 50779674!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout: aDate.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSale #checkout stamp: 'TCM 11/5/2019 17:43:21'!
checkout
	^ salesBook add: (Purchase for: cart)!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:31'!
checkoutOn: aDate
	^ salesBook add: (Purchase for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:31' prior: 50779986!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: (FixedGregorianDate  yearNumber: 2019 monthNumber: 10 dayNumber: 2)).
	
	
	
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkoutOn: aDate.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:43:31' prior: 50780010!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkoutOn: aDate.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSale #checkout: stamp: 'TCM 11/5/2019 17:43:31'!
checkout: aDate
	^ salesBook add: (Purchase for: cart)!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:44:33' prior: 50780038!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDate |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDate := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkoutOn: aDate.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:44:44' prior: 50780085!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDate |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDate := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkoutOn: aDate.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:45:22' prior: 50780108!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkoutOn: aDateAfterExpiration.! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:45:31'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:46:18' prior: 50780131!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkoutOn: aDateAfterExpiration]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardMessageError.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:46:28' prior: 50780159!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkoutOn: aDateAfterExpiration]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:46:32'!
ERROR!
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:46:46'!
expiredCardErrorMessage
	self shouldBeImplemented.! !
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:47:01' prior: 50780218!
expiredCardErrorMessage
	^ 'No se puede comprar con una tarjeta vencida'! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:47:03'!
FAILURE!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:10'!
checkoutOn
	^ salesBook add: (Purchase for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:10' prior: 50780187!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkoutOn]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:10' prior: 50780062!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkoutOn.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSale #checkoutOn: stamp: 'TCM 11/5/2019 17:48:10'!
checkoutOn: aDate
	^ salesBook add: (Purchase for: cart)!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:17'!
checkout
	^ salesBook add: (Purchase for: cart)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:17' prior: 50780237!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:17' prior: 50780265!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSale #checkoutOn stamp: 'TCM 11/5/2019 17:48:17'!
checkoutOn
	^ salesBook add: (Purchase for: cart)!
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 17:48:57'!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:57' prior: 50779030!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	

	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: anExpirationDate  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:57' prior: 50780292!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard onDate: anExpirationDate) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:48:57' prior: 50780319!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: anExpirationDate) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!methodRemoval: CashierForSale class #for:registerIn:payingWith: stamp: 'TCM 11/5/2019 17:48:57'!
for: aCart registerIn: aSalesBook payingWith: aCreditCard  
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 17:49:23' prior: 50780341!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: anExpirationDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard ! !
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/5/2019 17:49:52'!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: anExpirationDate   
	cart := aCart.
	salesBook := aSalesBook! !
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:49:52' prior: 50780425!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: anExpirationDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: anExpirationDate ! !

!methodRemoval: CashierForSale #initializeFor:registerIn:payingWith: stamp: 'TCM 11/5/2019 17:49:52'!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard  
	cart := aCart.
	salesBook := aSalesBook!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/5/2019 17:50:11'!
Object subclass: #CashierForSale
	instanceVariableNames: 'cart salesBook purchaseDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/5/2019 17:50:10' prior: 50780435!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate   
	cart := aCart.
	salesBook := aSalesBook.
	purchaseDate := aPurchaseDate! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 17:50:27' prior: 50780443!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:50:47' prior: 50780368!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard onDate: aDateAfterExpiration) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:50:49'!
FAILURE!
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 17:51:47' prior: 50780478!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aPurchaseDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate ! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:51:50'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:51:50'!
ERROR!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:51:50'!
ERROR!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:52:40' prior: 50780396!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := 0.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:53:01' prior: 50778464!
expirationDate

	^ GregorianMonthOfYear octoberOf: (GregorianYear number: 2019)! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 17:53:36' prior: 50780572!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 17:53:42'!
PASSED!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'TCM 11/5/2019 18:03:21'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:03:14' prior: 50780599!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.

		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:04:12' prior: 50780662!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 18:05:22'!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: paymentGateway    
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aPurchaseDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate ! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:05:22' prior: 50780352!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	

	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: anExpirationDate withPaymentGateway: aPaymentGateway  ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:05:22' prior: 50780490!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: expiredCreditCard onDate: aDateAfterExpiration withPaymentGateway: aPaymentGateway) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:05:22' prior: 50780692!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: aPaymentGateway) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !

!methodRemoval: CashierForSale class #for:registerIn:payingWith:onDate: stamp: 'TCM 11/5/2019 18:05:22'!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate   
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aPurchaseDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate !
!CashierForSale class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 18:05:26' prior: 50780723!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway    
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aPurchaseDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate ! !
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:06:14'!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway    
	cart := aCart.
	salesBook := aSalesBook.
	purchaseDate := aPurchaseDate! !
!CashierForSale class methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:06:14' prior: 50780832!
for: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway    
	aCart isEmpty ifTrue: [ self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aPurchaseDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	^self new initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway ! !

!methodRemoval: CashierForSale #initializeFor:registerIn:payingWith:onDate: stamp: 'TCM 11/5/2019 18:06:14'!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate   
	cart := aCart.
	salesBook := aSalesBook.
	purchaseDate := aPurchaseDate!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/5/2019 18:06:26'!
Object subclass: #CashierForSale
	instanceVariableNames: 'cart salesBook purchaseDate paymentGateway'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:06:24' prior: 50780847!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway    
	cart := aCart.
	salesBook := aSalesBook.
	purchaseDate := aPurchaseDate.
	paymentGateway := aPaymentGateway! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:07:33'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:07:30' prior: 50779045!
setUp
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	dummyPaymentGateway := MerchantProcessorSimulator responds: []
	
	
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:09:46'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:10:16'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:10:18'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:10:15' prior: 50780909!
setUp
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: self expirationDate holderName: 'PIRULO'.
	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:10:44' prior: 50780739!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: self priceListWithItem.
	

	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:10:59' prior: 50778482!
test02CreditCardCreationWithInvalidNumberFails


	
	self 
		should: [ CreditCard withNumber: '1234' expirationDate: expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:11:05' prior: 50778497!
test03CreditCardCreationWithLettersFails

	self 
		should: [ CreditCard withNumber: '12q4567890123456' expirationDate: expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:11:10' prior: 50778725!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO 12'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidHolderNameErrorMessage .
		

	
	! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:11:40' prior: 50779828!
test05IsExpiredOnExpiredCardReturnsTrue

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: expirationDate 
		holderName: 'PIRULO'.

	self assert: (expiredCreditCard isExpiredOn: dateAfterExpiration )! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:11:59' prior: 50779813!
test06IsExpiredOnNotExpiredCardReturnsFalse

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: expirationDate 
		holderName: 'PIRULO'.

	self deny: (expiredCreditCard isExpiredOn: dateBeforeExpiration )! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:12:41' prior: 50780756!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: expiredCreditCard
			onDate: aDateAfterExpiration
			withPaymentGateway: dummyPaymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:12:52' prior: 50780786!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 18:13:15'!
responds: aBlockClosure 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeResponds: aBlockClosure ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'TCM 11/5/2019 18:13:23' prior: 50781104!
responds: aBlockClosure 
	^self new initializeResponds: aBlockClosure ! !

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'TCM 11/5/2019 18:13:40'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockClosure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:13:40'!
initializeResponds: aBlockClosure 
	self shouldBeImplemented.
	blockClosure := aBlockClosure.! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:13:57' prior: 50781127!
initializeResponds: aBlockClosure
	blockClosure := aBlockClosure.! !

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:14:00'!
FAILURE!

!classDefinition: #CashierForSale category: #TusLibros stamp: 'TCM 11/5/2019 18:16:09'!
Object subclass: #CashierForSale
	instanceVariableNames: 'cart salesBook purchaseDate paymentGateway creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSale methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:16:08' prior: 50780890!
initializeFor: aCart registerIn: aSalesBook payingWith: aCreditCard onDate: aPurchaseDate withPaymentGateway: aPaymentGateway    
	cart := aCart.
	salesBook := aSalesBook.
	creditCard := aCreditCard.
	purchaseDate := aPurchaseDate.
	paymentGateway := aPaymentGateway! !
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:16:15' prior: 50780287!
checkout
	paymentGateway debit: (Purchase for: cart) totalSpent from: creditCard .
	^ salesBook add: (Purchase for: cart)! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:16:36'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:16:36'!
ERROR!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:16:36'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:16:42'!
debit: aSimpleMeasure from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:17:09' prior: 50781203!
debit: anAmountOfMoney from: aCreditCard 
	blockClosure value! !

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:17:12'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:17:19'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:17:23'!
PASSED!
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:19:04' prior: 50781164!
checkout
	| purchase |
	purchase := Purchase for: cart.
	paymentGateway debit: (Purchase for: cart) totalSpent from: creditCard .
	^ salesBook add: (Purchase for: cart)! !
!CashierForSale methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:19:18' prior: 50781254!
checkout
	| purchase |
	purchase := Purchase for: cart.
	paymentGateway debit: purchase totalSpent from: creditCard .
	^ salesBook add: purchase! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:19:23'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:28:25'!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:28:56' prior: 50781299!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:30:17' prior: 50781332!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self deny:( salesBook includes: (Purchase for: aCart)).
	self deny: (123 * peso = (Purchase for: aCart) totalSpent).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:30:18'!
ERROR!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:31:42' prior: 50781364!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self deny: (123 * peso = (Purchase for: aCart) totalSpent).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:31:43'!
FAILURE!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:31:56'!
FAILURE!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:32:18' prior: 50781400!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:32:20'!
FAILURE!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:32:43' prior: 50781443!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:32:45'!
PASSED!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:33:17' prior: 50781480!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	
	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:35:27' prior: 50781042!
test07CheckoutWithExpiredCardFails

	| expiredCreditCard aBook aCart pricesList salesBook aDateAfterExpiration paymentGateway paymentGatewayVisited |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2019))
		holderName: 'PIRULO'.

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	aDateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: expiredCreditCard
			onDate: aDateAfterExpiration
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:35:32'!
PASSED!

!methodRemoval: CashierForSaleTest #expirationDate stamp: 'TCM 11/5/2019 18:37:47'!
expirationDate

	^ GregorianMonthOfYear octoberOf: (GregorianYear number: 2019)!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:38:14' prior: 50780946!
setUp
	
	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:41:58' prior: 50781018!
test05IsExpiredOnExpiredCardReturnsTrue

	| expiredCreditCard |
	expiredCreditCard := CreditCard
		withNumber: '1234567890123456'
		expirationDate: expirationDate 
		holderName: 'PIRULO'.

	self assert: (creditCard isExpiredOn: dateAfterExpiration )! !

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:42:01'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:42:07' prior: 50781679!
test05IsExpiredOnExpiredCardReturnsTrue


	self assert: (creditCard isExpiredOn: dateAfterExpiration )! !

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:42:08'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:42:25' prior: 50781030!
test06IsExpiredOnNotExpiredCardReturnsFalse



	self deny: (creditCard isExpiredOn: dateBeforeExpiration )! !

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:42:26'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:43:06' prior: 50781585!
test07CheckoutWithExpiredCardFails

	| aBook aCart pricesList salesBook paymentGateway paymentGatewayVisited |

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:43:11'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:43:55' prior: 50781812!
test07CheckoutWithExpiredCardFails

	| aBook aCart pricesList salesBook paymentGateway paymentGatewayVisited |

	aBook := self itemSellByTheStore.
	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:43:56'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:44:54' prior: 50781551!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	

	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:45:02' prior: 50781072!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart aBook salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	

	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:45:15' prior: 50781874!
test07CheckoutWithExpiredCardFails

	| aBook aCart pricesList salesBook paymentGateway paymentGatewayVisited |


	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:45:31' prior: 50782001!
test07CheckoutWithExpiredCardFails

	| aBook aCart pricesList salesBook paymentGateway paymentGatewayVisited |


	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: aBook.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:45:59'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:45:58' prior: 50782027!
test07CheckoutWithExpiredCardFails

	| aCart pricesList salesBook paymentGateway paymentGatewayVisited |


	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: book.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:46:09'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/5/2019 18:46:09' prior: 50782063!
test07CheckoutWithExpiredCardFails

	| aCart pricesList salesBook paymentGateway paymentGatewayVisited |


	pricesList := self priceListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: item.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/5/2019 18:46:32' prior: 50781662!
setUp
	item := 'ElLaberintoDelFauno'.

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:46:54'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item pricesListWithItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/5/2019 18:46:53' prior: 50782126!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: self itemSellByTheStore -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!methodRemoval: CashierForSaleTest #itemSellByTheStore stamp: 'TCM 11/5/2019 18:47:01'!
itemSellByTheStore

	^ 'ElLaberintoDelFauno'!
!CartTest methodsFor: 'support' stamp: 'TCM 11/5/2019 18:47:13' prior: 50777997!
defaultCatalog
	
	^ Dictionary with: self item -> (50 * peso)! !
!CartTest methodsFor: 'support' stamp: 'TCM 11/4/2019 19:42:38' prior: 50782180!
defaultCatalog
	
	^ Dictionary with: self itemSellByTheStore -> (50 * peso)! !
!CashierForSaleTest methodsFor: 'support' stamp: 'TCM 11/5/2019 18:48:03' prior: 50778098!
priceListWithItem

	^ Dictionary with: item -> (123 * peso)! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/5/2019 18:48:08' prior: 50782155!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: self item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!methodRemoval: CashierForSaleTest #priceListWithItem stamp: 'TCM 11/5/2019 18:48:14'!
priceListWithItem

	^ Dictionary with: item -> (123 * peso)!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:48:28' prior: 50780964!
test01EmptyCartCannotCheckout

	| aCart salesBook  |
	
	aCart := Cart acceptingItemsOf: pricesListWithItem.
	

	
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:48:34' prior: 50782100!
test07CheckoutWithExpiredCardFails

	| aCart pricesList salesBook paymentGateway paymentGatewayVisited |


	pricesList := pricesListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: item.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:48:54' prior: 50781970!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	

	pricesList := pricesListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: item.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:49:07' prior: 50781937!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart salesBook pricesList aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |
	

	pricesList := pricesListWithItem.

	aCart := Cart acceptingItemsOf: pricesList.
	aCart add: item.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/5/2019 18:49:36' prior: 50782197!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:49:39'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:49:53' prior: 50782222!
test01EmptyCartCannotCheckout

	| aCart salesBook  |

	aCart := Cart acceptingItemsOf: pricesListWithItem.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:50:19' prior: 50780982!
test02CreditCardCreationWithInvalidNumberFails

	self 
		should: [ CreditCard withNumber: '1234' expirationDate: expirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:50:31' prior: 50781726!
test05IsExpiredOnExpiredCardReturnsTrue

	self assert: (creditCard isExpiredOn: dateAfterExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:50:35' prior: 50781769!
test06IsExpiredOnNotExpiredCardReturnsFalse

	self deny: (creditCard isExpiredOn: dateBeforeExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:50:55' prior: 50782239!
test07CheckoutWithExpiredCardFails

	| aCart salesBook paymentGateway paymentGatewayVisited |

	aCart := Cart acceptingItemsOf: pricesListWithItem.
	aCart add: item.

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: aCart
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:51:08' prior: 50782265!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart salesBook aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |

	aCart := Cart acceptingItemsOf: pricesListWithItem.
	aCart add: item.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:51:17' prior: 50782296!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| aCart salesBook aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |

	aCart := Cart acceptingItemsOf: pricesListWithItem.
	aCart add: item.

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: aCart registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: aCart)).
	self assert: merchantProcessorVisited 
		
	
	
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/5/2019 18:53:29'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item pricesListWithItem cartWithItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/5/2019 18:53:26' prior: 50782329!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:54:12' prior: 50782424!
test07CheckoutWithExpiredCardFails

	| salesBook paymentGateway paymentGatewayVisited |

	salesBook := OrderedCollection new.

	paymentGatewayVisited := false.
	paymentGateway := MerchantProcessorSimulator responds: [
		paymentGatewayVisited := true.
	].

	self should: [
		( CashierForSale 
			for: cartWithItem 
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGatewayVisited.
	self assert: salesBook  isEmpty .! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:54:17'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:54:29' prior: 50782449!
test08CartWithItemsIsCheckedOutSuccesfully

	| aCart salesBook aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |



	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: aCart).
	self assert: 123 * peso equals: (Purchase for: aCart) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:54:38' prior: 50782601!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |



	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:55:13' prior: 50782478!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook aDateBeforeExpiration merchantProcessorSimulator merchantProcessorVisited |

	salesBook := OrderedCollection new.
	
	aDateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: aDateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:55:19'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:56:10' prior: 50782656!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator merchantProcessorVisited |

	salesBook := OrderedCollection new.
	


	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:56:13'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:56:37' prior: 50782628!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook merchantProcessorSimulator merchantProcessorVisited |

	salesBook := OrderedCollection new.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:56:42'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:56:52' prior: 50782721!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator merchantProcessorVisited |

	salesBook := OrderedCollection new.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited  := true.
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny:( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorVisited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:57:42' prior: 50782783!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook merchantProcessorSimulator merchantProcessorVisited |

	salesBook := OrderedCollection new.

	merchantProcessorVisited := false.
	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		merchantProcessorVisited := true.
		^ 'OK'
	].

	(CashierForSale
		for: cartWithItem
		registerIn: salesBook
		payingWith: creditCard
		onDate: dateBeforeExpiration
		withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorVisited 
		
	
	
! !

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'TCM 11/5/2019 18:58:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockClosure wasVisited'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:58:17' prior: 50781134!
initializeResponds: aBlockClosure
	blockClosure := aBlockClosure.
	wasVisited := false.! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'TCM 11/5/2019 18:58:35'!
visited
	^ wasVisited! !
!MerchantProcessorSimulator methodsFor: 'payment' stamp: 'TCM 11/5/2019 18:59:00' prior: 50781209!
debit: anAmountOfMoney from: aCreditCard 
	wasVisited := true.
	blockClosure value! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 18:59:52' prior: 50782543!
test07CheckoutWithExpiredCardFails

	| salesBook paymentGateway |

	salesBook := OrderedCollection new.

	paymentGateway := MerchantProcessorSimulator responds: [].

	self should: [
		( CashierForSale 
			for: cartWithItem 
			registerIn: salesBook
			payingWith: creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGateway visited.
	self assert: salesBook  isEmpty .! !

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 18:59:57'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:00:35' prior: 50782868!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [].

	(CashierForSale
		for: cartWithItem
		registerIn: salesBook
		payingWith: creditCard
		onDate: dateBeforeExpiration
		withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorSimulator visited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:00:58' prior: 50782843!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].
	self should: [(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 
		
	
	
! !

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/5/2019 19:01:05'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:01:07' prior: 50782994!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	self should: [(CashierForSale for: cartWithItem registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:01:32' prior: 50783053!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	self
		should: [
			(CashierForSale 
				for: cartWithItem
				registerIn: salesBook
				payingWith: creditCard
				onDate: dateBeforeExpiration
				withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.
	

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:01:45' prior: 50783076!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	self
		should: [
			(CashierForSale 
				for: cartWithItem
				registerIn: salesBook
				payingWith: creditCard
				onDate: dateBeforeExpiration
				withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 

	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/5/2019 19:03:10' prior: 50782382!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := Cart acceptingItemsOf: pricesListWithItem.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

----SNAPSHOT----(5 November 2019 19:05:19) CuisUniversity-3938.image priorSource: 14330886!

----STARTUP---- (7 November 2019 19:06:39) as /home/tcarreira/Downloads/linux64/CuisUniversity-3938.image!


Object subclass: #AuthenticatedDispatcher
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatedDispatcher category: #TusLibros stamp: 'TCM 11/7/2019 19:07:51'!
Object subclass: #AuthenticatedDispatcher
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #AuthenticatedDispatcherTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatedDispatcherTest category: #TusLibros stamp: 'TCM 11/7/2019 19:08:45'!
TestCase subclass: #AuthenticatedDispatcherTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatedDispatcherTest methodsFor: 'no messages' stamp: 'TCM 11/7/2019 19:12:31'!
test01
	| cartId xxx |
	xxx := AuthenticatedDispatcher  new.
	
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !

!testRun: #AuthenticatedDispatcherTest #test01 stamp: 'TCM 11/7/2019 19:12:47'!
ERROR!
!AuthenticatedDispatcher methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:12:56'!
createCartFor: aSymbol with: aSymbol2 
	self shouldBeImplemented.! !
!AuthenticatedDispatcher methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:13:04' prior: 50783182!
createCartFor: aSymbol with: aSymbol2 ! !

!testRun: #AuthenticatedDispatcherTest #test01 stamp: 'TCM 11/7/2019 19:13:06'!
ERROR!
!AuthenticatedDispatcher methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:13:17'!
listCart: anAuthenticatedDispatcher 
	self shouldBeImplemented.! !
!AuthenticatedDispatcher methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:13:26' prior: 50783195!
listCart: anAuthenticatedDispatcher 
	^ #()! !

!testRun: #AuthenticatedDispatcherTest #test01 stamp: 'TCM 11/7/2019 19:13:27'!
PASSED!

!testRun: #AuthenticatedDispatcherTest #test01 stamp: 'TCM 11/7/2019 19:13:27'!
PASSED!
!AuthenticatedDispatcherTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:14:25'!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := AuthenticatedDispatcher  new.
	
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !

!methodRemoval: AuthenticatedDispatcherTest #test01 stamp: 'TCM 11/7/2019 19:14:25'!
test01
	| cartId xxx |
	xxx := AuthenticatedDispatcher  new.
	
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.!
!AuthenticatedDispatcherTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:14:38' prior: 50783212!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := AuthenticatedDispatcher new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !
!AuthenticatedDispatcherTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:18:26'!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := AuthenticatedDispatcher new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: 'aValidItem' withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) ocurrencesOf: 'aValidItem') equals: 5.! !

!testRun: #AuthenticatedDispatcherTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:19:19'!
ERROR!
!AuthenticatedDispatcherTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:19:44' prior: 50783231!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := RESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !
!AuthenticatedDispatcherTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:19:44' prior: 50783242!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := RESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: 'aValidItem' withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) ocurrencesOf: 'aValidItem') equals: 5.! !

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:20:33'!
ERROR!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:20:52'!
addToCart: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #RESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:21:35'!
Object subclass: #RESTFacade
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:21:24' prior: 50783188!
createCartFor: aSymbol with: aSymbol2 
	cart := Cart new.! !

!classDefinition: #RESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:22:40'!
Object subclass: #RESTFacade
	instanceVariableNames: 'cart catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:22:36' prior: 50783300!
createCartFor: aSymbol with: aSymbol2 
	cart := Cart acceptingItemsOf: catalogue.! !
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:23:33' prior: 50783312!
createCartFor: aSymbol with: aSymbol2 
	cart := Cart acceptingItemsOf: (Dictionary with: 'item' -> (123 * peso)).! !
!RESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:23:43' prior: 50783271!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := RESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: 'item' withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) ocurrencesOf: 'item') equals: 5.! !

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:23:59'!
ERROR!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:24:28' prior: 50783287!
addToCart: anItem withQuantity: aQuantity 
	cart add: aQuantity of: anItem! !

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:24:30'!
ERROR!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:25:53' prior: 50783201!
listCart: anAuthenticatedDispatcher 
	| items |
	items := Bag new.
	cart itemsDo: [ :anItem :aQuantity |
		items
		]! !
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:26:22' prior: 50783351!
listCart: anAuthenticatedDispatcher 
	| items |
	items := Bag new.
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	]! !
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:26:34' prior: 50783358!
listCart: anAuthenticatedDispatcher 
	| items |
	items := Bag new.
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

!testRun: #RESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:36'!
PASSED!

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:36'!
ERROR!

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:36'!
ERROR!
!RESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:26:49' prior: 50783325!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := RESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: 'item' withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) occurrencesOf: 'item') equals: 5.! !

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:50'!
PASSED!

!testRun: #RESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:52'!
PASSED!

!testRun: #RESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:26:52'!
PASSED!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:27:58' prior: 50783318!
createCartFor: anUser with: aPassword 
	cart := Cart acceptingItemsOf: (Dictionary with: 'item' -> (123 * peso)).! !

Object subclass: #TusLibrosTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTestObjectsFactory category: #TusLibros stamp: 'TCM 11/7/2019 19:28:21'!
Object subclass: #TusLibrosTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestObjectsFactory methodsFor: 'no messages' stamp: 'TCM 11/7/2019 19:29:17'!
catalog
	^ self! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:29:58' prior: 50783430!
catalog
	^ (Dictionary with: 'item' -> (123 * peso))! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:30:24' prior: 50783435!
catalog
	^ (Dictionary with: self itemSellByStore -> self priceOfItemSellByStore)! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:30:43'!
itemSellByStore
	^ 'anItem'! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:30:57'!
priceOfItemSellByStore
	^ 123 * peso! !
!RESTFacade class methodsFor: 'no messages' stamp: 'TCM 11/7/2019 19:32:38'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #RESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:33:01'!
Object subclass: #RESTFacade
	instanceVariableNames: 'cart catalogue catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:32:59'!
initializeAcceptingItemsOf: aCatalog
	catalog := aCatalog! !
!RESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:33:08' prior: 50783411!
createCartFor: anUser with: aPassword 
	cart := Cart acceptingItemsOf: catalog.! !
!RESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:33:27' prior: 50783260!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := TusLibrosRESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !
!RESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:33:27' prior: 50783387!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := TusLibrosRESTFacade new.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: 'item' withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) occurrencesOf: 'item') equals: 5.! !

!classDefinition: #TusLibrosRESTFacadeTest category: #TusLibros stamp: 'TCM 11/7/2019 19:34:24'!
TestCase subclass: #TusLibrosRESTFacadeTest
	instanceVariableNames: 'objectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:34:22'!
setUp
	objectsFactory := TusLibrosTestObjectsFactory new.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:34:35' prior: 50783479!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	self assert: (xxx listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:35:12' prior: 50783490!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId xxx |
	xxx := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := xxx createCartFor: #aUser with: #aPasssword.
	
	xxx addToCart: objectsFactory itemSellByStore withQuantity: 5.
	
	self assert: ((xxx listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:35:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:35:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:35:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:36:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:36:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:36:13'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:36:43' prior: 50783528!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:36:50' prior: 50783516!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	self assert: (facade listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:39:24'!
test03CannotListNonExistantCart
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	
	self 
		should: [  (facade listCart: cartId)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:39:40' prior: 50783597!
test03CannotListNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	
	self 
		should: [  (facade listCart: 31234)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:39:46'!
ERROR!
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/7/2019 19:39:57'!
cartDoesNotExistErrorMessage
	self shouldBeImplemented.! !
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/7/2019 19:40:12' prior: 50783625!
cartDoesNotExistErrorMessage
	^ 'El carrito no existe'! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:40:14'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:41:14' prior: 50783366!
listCart: anAuthenticatedDispatcher 
	| items |
	items := Bag new.
	
	cart ifNil: [ self class cartDoesNotExistErrorMessage ].	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:41:23' prior: 50783640!
listCart: anAuthenticatedDispatcher 
	| items |
	items := Bag new.
	
	cart ifNil: [ self error: self class cartDoesNotExistErrorMessage ].	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:41:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:41:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:41:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:41:31'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:43:59' prior: 50783569!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:44:06'!
test04AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:36:43' prior: 50783678!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:45:17'!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !

!methodRemoval: TusLibrosRESTFacadeTest #test04AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:45:17'!
test04AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: objectsFactory itemSellByStore withQuantity: 5.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:45:22'!
FAILURE!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:46:28'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'cart catalogue catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:46:29'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'cart catalogue catalog carts nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:46:26' prior: 50783468!
initializeAcceptingItemsOf: aCatalog
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:47:05' prior: 50783473!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId next.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:48:49' prior: 50783651!
listCart: aCartId 
	| items |
	items := Bag new.
	
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:49:00' prior: 50783805!
listCart: aCartId 
	| items cartt |
	items := Bag new.
	
	cartt := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].	
	cartt itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 19:49:09'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:49:15' prior: 50783816!
listCart: aCartId 
	| items cart |
	items := Bag new.
	
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:26'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:26'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:49:26'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:49:26'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:31'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:49:52' prior: 50783797!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:49:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:49:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:49:56'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:50:32' prior: 50783873!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:50:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:50:33'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:50:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:50:33'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:50:34'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:53:42' prior: 50783341!
addToCart: aCartId withQuantity: aQuantity 
	| cart |
	cart add: aQuantity of: aCartId! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:03'!
addToCart: aCartId withQuantity: aQuantity of: anItem  
	| cart |
	cart add: aQuantity of: aCartId! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:03' prior: 50783731!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: objectsFactory itemSellByStore withQuantity: 5 of: sdsad.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:03' prior: 50783716!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: objectsFactory itemSellByStore withQuantity: 5 of: sdsad.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !

!methodRemoval: TusLibrosRESTFacade #addToCart:withQuantity: stamp: 'TCM 11/7/2019 19:54:03'!
addToCart: aCartId withQuantity: aQuantity 
	| cart |
	cart add: aQuantity of: aCartId!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:29' prior: 50783935!
addToCart: aCartId withQuantity: aQuantity of: anItem  
	| cart |
	cart add: aQuantity of: anItem! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:50' prior: 50783984!
addToCart: aCartId withQuantity: aQuantity of: anItem  
	| |
	(carts at: aCartId) add: aQuantity of: anItem! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:54:57' prior: 50783991!
addToCart: aCartId withQuantity: aQuantity of: anItem
	(carts at: aCartId) add: aQuantity of: anItem! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:55:22' prior: 50783942!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:55:35' prior: 50783962!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:55:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:55:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:55:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:55:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:55:36'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:57:31'!
test05CannotAddToNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog.

	self
		should: [
		facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 19:57:32'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 19:58:29' prior: 50783998!
addToCart: aCartId withQuantity: aQuantity of: anItem
	(carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ]) add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 19:58:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 19:58:36'!
PASSED!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:02:45'!
userDatabase
	^ (Dictionary with: self username -> self  password)! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:02:45'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:02:45'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:02:45'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:02:45'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:02:45'!
PASSED!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:03:01'!
username 
	^ 'Tobi'! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:03:15'!
password
	^ 'axolotl'! !
!TusLibrosRESTFacade class methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54'!
acceptingItemsOf: aCatalog withUsers: users 

	^self new initializeAcceptingItemsOf: aCatalog ! !
!Cart class methodsFor: 'instance creation' stamp: 'TCM 11/7/2019 20:04:54'!
acceptingItemsOf: aCatalog withUsers: users 

	^self new initializeAcceptingItemsOf: aCatalog ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50777528!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog withUsers: objetsFactory userDatabase! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50782520!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem withUsers: objetsFactory userDatabase.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50783123!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := Cart acceptingItemsOf: pricesListWithItem withUsers: objetsFactory userDatabase.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50783901!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog withUsers: objetsFactory userDatabase).
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50783585!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objetsFactory userDatabase.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	self assert: (facade listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50784005!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objetsFactory userDatabase.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50783610!
test03CannotListNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objetsFactory userDatabase.

	
	self 
		should: [  (facade listCart: 31234)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50784025!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objetsFactory userDatabase.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:04:54' prior: 50784061!
test05CannotAddToNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objetsFactory userDatabase.

	self
		should: [
		facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !

!methodRemoval: TusLibrosRESTFacade class #acceptingItemsOf: stamp: 'TCM 11/7/2019 20:04:54'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'TCM 11/7/2019 20:04:54'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!Cart class methodsFor: 'instance creation' stamp: 'TCM 11/7/2019 20:04:54' prior: 50784172!
acceptingItemsOf: aCatalog withUsers: users 

	^self new initializeAcceptingItemsOf: aCatalog ! !
!Cart class methodsFor: 'instance creation' stamp: 'TCM 11/7/2019 20:05:19'!
acceptingItemsOf: aCatalog 

	^self new initializeAcceptingItemsOf: aCatalog ! !

!methodRemoval: Cart class #acceptingItemsOf:withUsers: stamp: 'TCM 11/7/2019 20:05:24'!
acceptingItemsOf: aCatalog withUsers: users 

	^self new initializeAcceptingItemsOf: aCatalog !

----SNAPSHOT----(7 November 2019 20:05:57) CuisUniversity-3938.image priorSource: 14447655!
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 20:07:00' prior: 50784178!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 20:07:14' prior: 50784185!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 20:07:18' prior: 50784354!
setUp
	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 20:07:20'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:07:20'!
ERROR!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 20:07:32' prior: 50784210!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := Cart acceptingItemsOf: pricesListWithItem.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:07:44' prior: 50784238!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	self assert: (facade listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:07:48' prior: 50784287!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.
	
	cartId := facade createCartFor: #aUser with: #aPasssword.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:07:52' prior: 50784273!
test03CannotListNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	
	self 
		should: [  (facade listCart: 31234)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:07:55' prior: 50784252!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId1 := facade createCartFor: #aUser with: #aPassword.
	cartId2 := facade createCartFor: #aUser with: #aPassword.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:07:56'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:07:56'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:07:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:07:56'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:07:56'!
ERROR!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:08:04' prior: 50784304!
test05CannotAddToNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self
		should: [
		facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:08:05'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:08:05'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:08:05'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:08:05'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:08:12'!
ERROR!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 20:08:35'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId userDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:08:27' prior: 50784229!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog withUsers:  userDatabase).
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:08:38' prior: 50784763!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog withUsers: userDatabase).
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:08:45' prior: 50784772!
createCartFor: anUser with: aPassword 
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade class methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:09:16' prior: 50784166!
acceptingItemsOf: aCatalog withUsers: usersDatabase

	^self new initializeAcceptingItemsOf: aCatalog withUsers: usersDatabase! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:09:55'!
initializeAcceptingItemsOf: aCatalog withUsers: usersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.! !

!methodRemoval: TusLibrosRESTFacade #initializeAcceptingItemsOf: stamp: 'TCM 11/7/2019 20:09:55'!
initializeAcceptingItemsOf: aCatalog
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:10:00' prior: 50784796!
initializeAcceptingItemsOf: aCatalog withUsers: usersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:10:29' prior: 50784810!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	userDatabase := anUsersDatabase ! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 20:10:34'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:10:34' prior: 50784818!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase ! !
!TusLibrosRESTFacade class methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:10:43' prior: 50784789!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:10:57'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:10:57'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:10:57'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:10:57'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:10:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 20:11:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:11:10'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:14:46'!
test06CannotCreateCartWithInvalidUser
	| cartId1 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [cartId1 := facade createCartFor: objectsFactory invalidUsername with: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:15:04' prior: 50784987!
test06CannotCreateCartWithInvalidUser
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [ facade createCartFor: objectsFactory invalidUsername with: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:15:07'!
ERROR!
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/7/2019 20:15:20'!
invalidadCredentialsErrorMessage
	self shouldBeImplemented.! !
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/7/2019 20:15:31' prior: 50785022!
invalidadCredentialsErrorMessage
	^ 'Credenciales invalidas'! !

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:15:32'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:15:40'!
invalidUsername
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:15:45' prior: 50785037!
invalidUsername
	^ 'Santi'! !

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:15:48'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:16:45' prior: 50784781!
createCartFor: anUser with: aPassword
	usersDatabase at: anUser ifAbsent: [ self error: self class invalidadCredentialsErrorMessage ].
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:16:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:16:50'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:16:50'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:16:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:16:50'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:16:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:16:50'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:17:10' prior: 50784502!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	self assert: (facade listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:17:32' prior: 50784516!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:17:57' prior: 50784547!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:17:59'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:18:24'!
test06CannotCreateCartWithValidUserButInvalidPassword
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [ facade createCartFor: objectsFactory username with: objectsFactory invalidPassword ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:18:31'!
test07CannotCreateCartWithValidUserButInvalidPassword
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [ facade createCartFor: objectsFactory username with: objectsFactory invalidPassword ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !

!methodRemoval: TusLibrosRESTFacadeTest #test06CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:18:31'!
test06CannotCreateCartWithValidUserButInvalidPassword
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [ facade createCartFor: objectsFactory username with: objectsFactory invalidPassword ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:18:33'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:18:41'!
invalidPassword
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:18:50' prior: 50785217!
invalidPassword
	^ 'password'.! !

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:18:51'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:19:50' prior: 50785050!
createCartFor: anUser with: aPassword
	usersDatabase at: anUser ifPresent: [ :correctPassword | correctPassword = aPassword ifFalse: [ self error: self class invalidadCredentialsErrorMessage ] ] ifAbsent: [ self error: self class invalidadCredentialsErrorMessage ].
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:19:53'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:20:49'!
assertValidUser: aPassword andPassword: anUser

	^ usersDatabase at: anUser ifPresent: [ :correctPassword | correctPassword = aPassword ifFalse: [ self error: self class invalidadCredentialsErrorMessage ] ] ifAbsent: [ self error: self class invalidadCredentialsErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:20:49' prior: 50785231!
createCartFor: anUser with: aPassword
	self assertValidUser: aPassword andPassword: anUser.
	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:20:52'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:22:01'!
areValidUser: aPassword andPassword: anUser

	^ usersDatabase at: anUser ifPresent: [ :correctPassword | correctPassword = aPassword i] ifAbsent: [ ^ true ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:23:14' prior: 50785277!
assertValidUser: aPassword andPassword: anUser

	^ (self areValidUser: anUser andPassword: aPassword) ifTrue: [ self error: self class invalidadCredentialsErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:23:32' prior: 50785325!
areValidUser: aPassword andPassword: anUser

	^ usersDatabase at: anUser ifPresent: [ :correctPassword | correctPassword ~= aPassword i] ifAbsent: [ ^ false ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:23:43' prior: 50785343!
areValidUser: anUser andPassword: aPassword

	^ usersDatabase at: anUser ifPresent: [ :correctPassword | correctPassword ~= aPassword ] ifAbsent: [ ^ false ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:23:54' prior: 50785334!
assertValidUser: anUser andPassword: aPassword

	^ (self areValidUser: anUser andPassword: aPassword) ifTrue: [ self error: self class invalidadCredentialsErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:24:01' prior: 50785361!
assertValidUser: anUser andPassword: aPassword

	^ (self areValidUser: anUser andPassword: aPassword) ifFalse: [ self error: self class invalidadCredentialsErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:24:15' prior: 50785289!
createCartFor: anUser with: aPassword
	self assertValidUser: anUser andPassword: aPassword.

	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	nextId := nextId + 1 .
	^ nextId - 1! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:24:19'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:24:19'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:24:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:24:19'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:24:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:24:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:24:19'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:24:24'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:25:23' prior: 50785352!
areValidUser: anUser andPassword: aPassword

	^ usersDatabase at: anUser ifPresent: [ :correctPassword | ^ correctPassword = aPassword ] ifAbsent: [ ^ false ]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:25:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:25:28'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:29:55'!
test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty
	| facade purchases |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:30:07' prior: 50785460!
test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty
	| facade purchases |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	self assert: purchases isEmpty! !

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 20:30:10'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:30:20'!
listPurchasesOf: aString withPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:30:37' prior: 50785491!
listPurchasesOf: anUser withPassword: aPassword 
	^ Bag new.! !

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 20:30:39'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:32:18'!
test09CannotListPurchasesWithInvalidCredentials
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	self 
		should: [ facade listPurchasesOf: objectsFactory invalidUsername withPassword: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 20:32:22'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:32:47' prior: 50785497!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.
	^ Bag new.! !

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 20:32:49'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:34:10'!
test10
	| cartId facade aCreditCard |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCreditCard := CreditCard new.

	facade checkoutCart: cartId with: aCreditCard.

	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:35:35' prior: 50785604!
test10
	| cartId facade aCreditCard aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := ''.
	aCCExpiration := ''.
	aCCOwner := '' .

	facade checkoutCart: cartId with: aCreditCard.

	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:36:45' prior: 50785624!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := ''.
	aCCExpiration := ''.
	aCCOwner := '' .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:37:07' prior: 50785645!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := ''.
	aCCExpiration := ''.
	aCCOwner := ''.

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:38:12'!
creditCard
	^ CreditCard withNumber: '1234567890123456' expirationDate: '' holderName: 'PIRULO'.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:38:24'!
creditCardNumber

	^ '1234567890123456'! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:38:24' prior: 50785691!
creditCard
	^ CreditCard withNumber: self creditCardNumber expirationDate: '' holderName: 'PIRULO'.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:38:40'!
creditCardName

	^ 'PIRULO'! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:38:40' prior: 50785703!
creditCard
	^ CreditCard withNumber: self creditCardNumber expirationDate: '' holderName: self creditCardName.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:39:01'!
creditCardExpirationDate

	^ ''! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:39:01' prior: 50785715!
creditCard
	^ CreditCard withNumber: self creditCardNumber expirationDate: self creditCardExpirationDate holderName: self creditCardName.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:39:22' prior: 50785722!
creditCardExpirationDate

	^ GregorianMonthOfYear octoberOf: (GregorianYear number: 2019)! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:39:51'!
creditCardExpirationText

	^ '102019'! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:40:36' prior: 50785668!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationText .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:41:45' prior: 50785746!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationText .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:48:38' prior: 50785772!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:49:35'!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !

!methodRemoval: TusLibrosRESTFacadeTest #test10 stamp: 'TCM 11/7/2019 20:49:35'!
test10
	| cartId facade aCCExpiration aCCNumber aCCOwner |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	self assert: ((facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password) occurrencesOf: objectsFactory itemSellByStore) equals: 5.!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:51:30' prior: 50785828!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	self assert: (purchases occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (purchases totalAmount) equals: 5 * objectsFactory priceOfItemSellByStore .! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:52:22' prior: 50785885!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	self assert: (purchases elements at: 1) equals: 5.
	self assert: (purchases totalSpent) equals: 5 * objectsFactory priceOfItemSellByStore .! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:57:42' prior: 50785919!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: (purchases totalSpent) equals: 5 * objectsFactory priceOfItemSellByStore.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:57:53' prior: 50785952!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: purchases totalSpent equals: 5 * objectsFactory priceOfItemSellByStore.! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 20:57:54'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 20:58:08'!
checkoutCart: aSmallInteger withCreditCardNumber: aString creditCardExpiration: aGregorianMonthOfYear creditCardOwner: aString4 
	self shouldBeImplemented.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:01:44' prior: 50786035!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner 

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	
	CashierForSale for: cart registerIn: '' payingWith: creditCard onDate: '' withPaymentGateway:'' ! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 21:03:02'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:02:59' prior: 50786044!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner 

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: '' withPaymentGateway:'' ! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:03:15' prior: 50784835!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBook := OrderedCollection new.! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/7/2019 21:03:33'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase salesBook paymentGateway'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:03:31' prior: 50786069!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner 

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: '' withPaymentGateway: paymentGateway! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:03:46' prior: 50786086!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBook := OrderedCollection new.
	paymentGateway! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:04:39'!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBook := OrderedCollection new.
	paymentGateway! !
!TusLibrosRESTFacade class methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:04:39' prior: 50784844!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway! !

!methodRemoval: TusLibrosRESTFacade #initializeAcceptingItemsOf:withUsers: stamp: 'TCM 11/7/2019 21:04:39'!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase 
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBook := OrderedCollection new.
	paymentGateway!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:04:58' prior: 50786132!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBook := OrderedCollection new.
	paymentGateway := aPaymentGateway! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:05:47' prior: 50784377!
setUp

	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!TusLibrosRESTFacade class methodsFor: 'instance creation' stamp: 'TCM 11/7/2019 21:06:51'!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway 

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway! !

!methodRemoval: TusLibrosRESTFacade class #acceptingItemsOf:withUsers: stamp: 'TCM 11/7/2019 21:07:34'!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:06' prior: 50785088!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	self assert: (facade listCart: cartId) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:10' prior: 50785102!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:14' prior: 50784533!
test03CannotListNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	
	self 
		should: [  (facade listCart: 31234)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:20' prior: 50785120!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:25' prior: 50784651!
test05CannotAddToNonExistantCart
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	self
		should: [
		facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:28' prior: 50785003!
test06CannotCreateCartWithInvalidUser
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	self 
		should: [ facade createCartFor: objectsFactory invalidUsername with: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:33' prior: 50785181!
test07CannotCreateCartWithValidUserButInvalidPassword
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	self 
		should: [ facade createCartFor: objectsFactory username with: objectsFactory invalidPassword ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:38' prior: 50785473!
test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty
	| facade purchases |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	self assert: purchases isEmpty! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:44' prior: 50785538!
test09CannotListPurchasesWithInvalidCredentials
	| facade |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	self 
		should: [ facade listPurchasesOf: objectsFactory invalidUsername withPassword: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:08:48' prior: 50785992!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: purchases totalSpent equals: 5 * objectsFactory priceOfItemSellByStore.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:10:15'!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: '' withPaymentGateway: paymentGateway! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:10:15' prior: 50786381!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: aDate.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: purchases totalSpent equals: 5 * objectsFactory priceOfItemSellByStore.! !

!methodRemoval: TusLibrosRESTFacade #checkoutCart:withCreditCardNumber:creditCardExpiration:creditCardOwner: stamp: 'TCM 11/7/2019 21:10:15'!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner 

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: '' withPaymentGateway: paymentGateway!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:10:20' prior: 50786422!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:11:09'!
dateBeforeExpiration

	^ FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:11:25' prior: 50786440!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: purchases totalSpent equals: 5 * objectsFactory priceOfItemSellByStore.! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:11:26'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:12:46' prior: 50785558!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.

	^ Purchase new.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:13:12' prior: 50786571!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.

	^ Purchase new.! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:13:33' prior: 50786579!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.

	^ salesBook first! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:13:36'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:13:36'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:13:36'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:15:45' prior: 50786587!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.

	^ salesBook isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBook first ]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:15:46'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:15:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:15:46'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:15:48'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:15:54'!
isEmpty
	self shouldBeImplemented.! !
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:16:04' prior: 50786686!
isEmpty
	^ elements isEmpty! !

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:16:05'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:16:35'!
initialize
	elements := OrderedCollection new! !
!Purchase methodsFor: 'initialization' stamp: 'TCM 11/7/2019 21:16:53' prior: 50779397!
initializeFor: aCart 
	self initialize.
	
	aCart itemsDo: [  :anItem :aQuantity |
		elements add: (Array with: anItem with: aQuantity  with: (aCart priceOf: anItem) )
	].! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:16:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:16:56'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:16:56'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:17:07'!
itemsDo: aBlockClosure 
	self shouldBeImplemented.! !
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:17:53' prior: 50786756!
itemsDo: aBlockClosure 
	elements do: [ :anElement |
		aBlockClosure value: (anElement at: 1) value: (anElement at: 2)
	]! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:17:54'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:18:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:18:25'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:18:25'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:20:31' prior: 50786500!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:20:33'!
FAILURE!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:20:54' prior: 50786524!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: purchases totalSpent equals: 2 * objectsFactory priceOfItemSellByStore.! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:20:55'!
FAILURE!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:21:16' prior: 50786839!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: (MerchantProcessorSimulator responds: []).

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: 2 * objectsFactory priceOfItemSellByStore equals: purchases totalSpent.! !
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/7/2019 21:22:03' prior: 50779610!
totalSpent
	^ elements inject: 0 into: [ :acc :elem | (elem at: 3) * (elem at: 2)  + acc ]! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:22:04'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:22:08'!
PASSED!

!classDefinition: #CartTest category: #TusLibros stamp: 'TCM 11/7/2019 21:23:05'!
TestCase subclass: #CartTest
	instanceVariableNames: 'objectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 21:23:03'!
setUp

	objectsFactory := TusLibrosTestObjectsFactory new.! !
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 21:23:42' prior: 50784349!
createCart
	
	^ objectsFactory emptyCart! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 21:23:48'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:23:50'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:23:56'!
emptyCart
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:24:27' prior: 50787028!
emptyCart
	^ Cart acceptingItemsOf: self catalog ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:24:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:24:37'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 21:24:37'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 21:24:37'!
ERROR!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 21:24:37'!
ERROR!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 21:24:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:24:39'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 21:25:11' prior: 50777538!
itemSellByTheStore
	
	^ objectsFactory itemSellByStore ! !
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 21:25:32' prior: 50777524!
itemNotSellByTheStore
	
	^ objectsFactory itemNotSellByTheStore! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:25:33'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 21:25:33'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 21:25:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:25:35'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:25:45'!
itemNotSellByTheStore
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:25:55' prior: 50787122!
itemNotSellByTheStore
	^ 'El libro que no queres vender'! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:25:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 21:25:58'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'TCM 11/7/2019 21:26:08' prior: 50782185!
defaultCatalog
	
	^ objectsFactory catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/7/2019 21:26:08'!
PASSED!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:26:44'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'creditCard dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:26:42' prior: 50786175!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	creditCard := CreditCard withNumber: '1234567890123456' expirationDate: expirationDate holderName: 'PIRULO'.
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 21:27:03'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:27:38' prior: 50784484!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := Cart acceptingItemsOf: pricesListWithItem.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:28:08'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway expirationDate dateAfterExpiration dateBeforeExpiration item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:28:31' prior: 50787273!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := Cart acceptingItemsOf: pricesListWithItem.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: objectFactory creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:28:47' prior: 50782410!
test05IsExpiredOnExpiredCardReturnsTrue

	self assert: (objectFactory creditCard isExpiredOn: dateAfterExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:28:52' prior: 50782417!
test06IsExpiredOnNotExpiredCardReturnsFalse

	self deny: (objectFactory creditCard isExpiredOn: dateBeforeExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:28:56' prior: 50782917!
test07CheckoutWithExpiredCardFails

	| salesBook paymentGateway |

	salesBook := OrderedCollection new.

	paymentGateway := MerchantProcessorSimulator responds: [].

	self should: [
		( CashierForSale 
			for: cartWithItem 
			registerIn: salesBook
			payingWith: objectFactory creditCard 
			onDate: dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGateway visited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:29:00' prior: 50782973!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [].

	(CashierForSale
		for: cartWithItem
		registerIn: salesBook
		payingWith: objectFactory creditCard
		onDate: dateBeforeExpiration
		withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorSimulator visited 
		
	
	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:29:03' prior: 50783100!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	self
		should: [
			(CashierForSale 
				for: cartWithItem
				registerIn: salesBook
				payingWith: objectFactory creditCard
				onDate: dateBeforeExpiration
				withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 

	
! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:29:11' prior: 50787216!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].

	expirationDate := GregorianMonthOfYear octoberOf: (GregorianYear number: 2019).
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 21:29:11'!
PASSED!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:30:48' prior: 50782399!
test02CreditCardCreationWithInvalidNumberFails

	self 
		should: [ CreditCard withNumber: '1234' expirationDate: objectFactory creditCardExpirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:30:57' prior: 50781006!
test04CreditCardCreationWithNotOnlyLettersFails

	self 
		should: [ CreditCard withNumber: '1234567890123456' expirationDate: objectFactory creditCardExpirationDate holderName: 'PIRULO 12'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidHolderNameErrorMessage .
		

	
	! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:31:00' prior: 50780994!
test03CreditCardCreationWithLettersFails

	self 
		should: [ CreditCard withNumber: '12q4567890123456' expirationDate: objectFactory creditCardExpirationDate holderName: 'PIRULO'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorMessage.
		

	
	! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:31:06' prior: 50787408!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := Cart acceptingItemsOf: pricesListWithItem.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 21:31:11'!
PASSED!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:31:51'!
dateAfterExpiration

	^ FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:32:59' prior: 50787310!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := objectFactory emptyCart.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: objectFactory creditCard onDate: dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:33:20' prior: 50787500!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	item := 'ElLaberintoDelFauno'.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:33:54' prior: 50787575!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	item := objectFactory itemSellByStore.
	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: item.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:33:55'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 21:33:56'!
PASSED!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:34:20' prior: 50787593!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: objectFactory itemSellByStore.
	
	dateAfterExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 1.
	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/7/2019 21:34:26'!
PASSED!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:34:31'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway dateAfterExpiration dateBeforeExpiration item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:34:59' prior: 50787328!
test05IsExpiredOnExpiredCardReturnsTrue

	self assert: (objectFactory creditCard isExpiredOn: objectFactory dateAfterExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:35:05' prior: 50787342!
test07CheckoutWithExpiredCardFails

	| salesBook paymentGateway |

	salesBook := OrderedCollection new.

	paymentGateway := MerchantProcessorSimulator responds: [].

	self should: [
		( CashierForSale 
			for: cartWithItem 
			registerIn: salesBook
			payingWith: objectFactory creditCard 
			onDate: objectFactory dateAfterExpiration 
			withPaymentGateway: paymentGateway ) checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: CashierForSale expiredCardErrorMessage.

	self deny: paymentGateway visited.
	self assert: salesBook  isEmpty .! !
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:35:16' prior: 50787647!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: objectFactory itemSellByStore.

	dateBeforeExpiration := FixedGregorianDate yearNumber: 2019 monthNumber: 10 dayNumber: 1.
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:35:21'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway dateBeforeExpiration item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:35:40' prior: 50787736!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	pricesListWithItem := Dictionary with: item -> (123 * peso).

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: objectFactory itemSellByStore.
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:35:45' prior: 50787384!
test09IfMerchantProcessorFailsThePurcharseIsNotDone

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [
		self error: 'Bad Request'.
	].

	self
		should: [
			(CashierForSale 
				for: cartWithItem
				registerIn: salesBook
				payingWith: objectFactory creditCard
				onDate: objectFactory dateBeforeExpiration
				withPaymentGateway: merchantProcessorSimulator) checkout.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Bad Request'.

	self deny: ( salesBook includes: (Purchase for: cartWithItem )).
	self assert: merchantProcessorSimulator visited. 

	
! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:35:50' prior: 50787335!
test06IsExpiredOnNotExpiredCardReturnsFalse

	self deny: (objectFactory creditCard isExpiredOn: objectFactory dateBeforeExpiration )! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:35:57' prior: 50787557!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := objectFactory emptyCart.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: objectFactory creditCard onDate: objectFactory dateBeforeExpiration withPaymentGateway: dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:36:02' prior: 50787362!
test08CartWithItemsIsCheckedOutSuccesfully

	| salesBook merchantProcessorSimulator |

	salesBook := OrderedCollection new.

	merchantProcessorSimulator := MerchantProcessorSimulator responds: [].

	(CashierForSale
		for: cartWithItem
		registerIn: salesBook
		payingWith: objectFactory creditCard
		onDate: objectFactory dateBeforeExpiration
		withPaymentGateway: merchantProcessorSimulator) checkout.

	self assert: salesBook includes: (Purchase for: cartWithItem).
	self assert: 123 * peso equals: (Purchase for: cartWithItem) totalSpent.
	self assert: merchantProcessorSimulator visited 
		
	
	
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:36:08'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway item pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:36:53' prior: 50787761!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	dummyPaymentGateway := MerchantProcessorSimulator responds: [].
	
	cartWithItem := objectFactory emptyCart.
	cartWithItem add: objectFactory itemSellByStore.
! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:37:00'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway pricesListWithItem cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:37:00'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'dummyPaymentGateway cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierForSaleTest methodsFor: 'setUp/tearDown' stamp: 'TCM 11/7/2019 21:38:08' prior: 50787855!
setUp

	objectFactory := TusLibrosTestObjectsFactory new.

	cartWithItem := objectFactory emptyCart.
	cartWithItem add: objectFactory itemSellByStore.
! !
!TusLibrosTestObjectsFactory methodsFor: 'builders' stamp: 'TCM 11/7/2019 21:38:20'!
dummyPaymentGateway
	^ MerchantProcessorSimulator responds: [].! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:38:36' prior: 50786886!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := TusLibrosRESTFacade acceptingItemsOf: objectsFactory catalog withUsers: objectsFactory userDatabase withPaymentGateway: objectsFactory dummyPaymentGateway.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: 2 * objectsFactory priceOfItemSellByStore equals: purchases totalSpent.! !
!CashierForSaleTest methodsFor: 'tests' stamp: 'TCM 11/7/2019 21:38:57' prior: 50787805!
test01EmptyCartCannotCheckout

	| anEmptyCart salesBook  |

	anEmptyCart := objectFactory emptyCart.
	salesBook := OrderedCollection new.

	self 
		should: [ CashierForSale for: anEmptyCart registerIn: salesBook payingWith: objectFactory creditCard onDate: objectFactory dateBeforeExpiration withPaymentGateway: objectFactory dummyPaymentGateway ]
		raise: Error - MessageNotUnderstood
		withMessageText: CashierForSale emptyCartErrorMessage .

	self assert: salesBook isEmpty! !

!classDefinition: #CashierForSaleTest category: #TusLibros stamp: 'TCM 11/7/2019 21:39:03'!
TestCase subclass: #CashierForSaleTest
	instanceVariableNames: 'cartWithItem objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:39:47' prior: 50786217!
test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty
	| cartId facade |
	facade := objectsFactory facade.
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	self assert: (facade listCart: cartId) isEmpty.! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:39:49'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:39:54'!
facade
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:40:21' prior: 50787982!
facade
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:40:28'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:40:39' prior: 50786233!
test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty
	| cartId facade |
	facade := objectsFactory facade.
	
	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:40:45' prior: 50786253!
test03CannotListNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self 
		should: [  (facade listCart: 31234)] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:40:51' prior: 50786269!
test04AddingItemsToACartDoesNotChangeAnotherCart
	| cartId1 cartId2 facade |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId1 withQuantity: 5 of: objectsFactory itemSellByStore.

	self assert: ((facade listCart: cartId1) occurrencesOf: objectsFactory itemSellByStore) equals: 5.
	self assert: (facade listCart: cartId2) isEmpty.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:40:56' prior: 50786294!
test05CannotAddToNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self
		should: [
		facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:01' prior: 50786311!
test06CannotCreateCartWithInvalidUser
	| facade |
	facade := objectsFactory facade.

	self 
		should: [ facade createCartFor: objectsFactory invalidUsername with: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:41:02'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:06' prior: 50786329!
test07CannotCreateCartWithValidUserButInvalidPassword
	| facade |
	facade := objectsFactory facade.

	self 
		should: [ facade createCartFor: objectsFactory username with: objectsFactory invalidPassword ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:12' prior: 50786347!
test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty
	| facade purchases |
	facade := objectsFactory facade.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	self assert: purchases isEmpty! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:16' prior: 50786363!
test09CannotListPurchasesWithInvalidCredentials
	| facade |
	facade := objectsFactory facade.

	self 
		should: [ facade listPurchasesOf: objectsFactory invalidUsername withPassword: objectsFactory password ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage
	! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:22' prior: 50787897!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: 2 * objectsFactory priceOfItemSellByStore equals: purchases totalSpent.! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:41:23'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:41:55' prior: 50788196!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases items expectedItems |
	facade := objectsFactory facade.
	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	items := Bag new.
	purchases itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.

	self assert: expectedItems equals: items.
	self assert: 2 * objectsFactory priceOfItemSellByStore equals: purchases totalSpent.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:45:03'!
assertPurchase: aPurchase has: aBagOfItems andTotalAmount: totalAmount

	| items |
	items := Bag new.
	aPurchase itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].

	self assert: aBagOfItems equals: items.
	self assert: totalAmount priceOfItemSellByStore equals: aPurchase totalSpent.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:45:13' prior: 50788316!
assertPurchase: aPurchase has: aBagOfItems andTotalAmount: totalAmount

	| items |

	items := Bag new.
	aPurchase itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].

	self assert: aBagOfItems equals: items.
	self assert: totalAmount priceOfItemSellByStore equals: aPurchase totalSpent.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:46:19' prior: 50788278!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases expectedItems expectedAmount |
	facade := objectsFactory facade.
	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory.

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:46:25'!
ERROR!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:46:48' prior: 50788344!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases expectedItems expectedAmount |
	facade := objectsFactory facade.
	aCCNumber := objectsFactory creditCardNumber .
	aCCExpiration := objectsFactory creditCardExpirationDate .
	aCCOwner := objectsFactory creditCardName .

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:46:49'!
ERROR!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:47:17' prior: 50788330!
assertPurchase: aPurchase has: aBagOfItems andTotalAmount: totalAmount

	| items |

	items := Bag new.
	aPurchase itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].

	self assert: aBagOfItems equals: items.
	self assert: totalAmount equals: aPurchase totalSpent.! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:47:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:47:19'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:47:44' prior: 50788086!
test05CannotAddToNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self
		should: [ facade addToCart: 213213 withQuantity: 5 of: objectsFactory itemSellByStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:48:07' prior: 50788055!
test03CannotListNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self 
		should: [ facade listCart: 31234 ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:48:37' prior: 50788537!
test03CannotListNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self 
		should: [ facade listCart: objectsFactory invalidCartId ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:48:39'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:48:46'!
invalidCartId
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:48:57' prior: 50788563!
invalidCartId
	^ 'cart id invalido'! !

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:48:58'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:49:21' prior: 50788524!
test05CannotAddToNonExistantCart
	| facade |
	facade := objectsFactory facade.

	self
		should: [ facade addToCart: objectsFactory invalidCartId withQuantity: 5 of: objectsFactory itemSellByStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage 
! !

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:49:21'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:50:00' prior: 50788383!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	aCCNumber := objectsFactory creditCardNumber.
	aCCExpiration := objectsFactory creditCardExpirationDate.
	aCCOwner := objectsFactory creditCardName.
	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:50:12' prior: 50788673!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade aCCExpiration aCCNumber aCCOwner purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	aCCNumber := objectsFactory creditCardNumber.
	aCCExpiration := objectsFactory creditCardExpirationDate.
	aCCOwner := objectsFactory creditCardName.
	facade checkoutCart: cartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:51:05'!
makeCheckoutIn: aFacade forCartId: aCartId
	| aCCExpiration aCCNumber aCCOwner |
	aCCNumber := objectsFactory creditCardNumber.
	aCCExpiration := objectsFactory creditCardExpirationDate.
	aCCOwner := objectsFactory creditCardName.
	aFacade checkoutCart: aCartId withCreditCardNumber: aCCNumber creditCardExpiration: aCCExpiration creditCardOwner: aCCOwner onDate: objectsFactory dateBeforeExpiration.
! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:51:32' prior: 50788709!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	self makeCheckoutIn: facade forCartId: cartId.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/7/2019 21:51:35'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/7/2019 21:51:56' prior: 50788761!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId.
	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

----SNAPSHOT----(7 November 2019 21:52:32) CuisUniversity-3938.image priorSource: 14486250!

----QUIT----(7 November 2019 21:54:31) CuisUniversity-3938.image priorSource: 14630566!

----STARTUP---- (11 November 2019 17:40:05) as /home/tcarreira/Downloads/linux64/CuisUniversity-3938.image!


!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 17:40:41'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 17:40:46'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 17:56:29'!
test11PurchasesOfDifferentUsersDontGetMixed
	| cartId1 cartId2 facade purchasesFromUserWhichBuyed purchasesFromUserWhichDidntBuy expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	cartId2 := facade createCartFor: objectsFactory anotherUsername with: objectsFactory anotherUserPassword.

	facade addToCart: cartId1 withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId1.
	purchasesFromUserWhichBuyed := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.
	purchasesFromUserWhichDidntBuy := facade listPurchasesOf: objectsFactory anotherUsername withPassword: objectsFactory anotherUserPassword.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchasesFromUserWhichBuyed has: expectedItems andTotalAmount: expectedAmount.
	self assertPurchase: purchasesFromUserWhichBuyed has: Bag new andTotalAmount: 0 * peso.! !
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 17:57:08' prior: 50788938!
test11PurchasesOfDifferentUsersDontGetMixed
	| cartId facade purchasesFromUserWhichBuyed purchasesFromUserWhichDidntBuy expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId.
	purchasesFromUserWhichBuyed := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.
	purchasesFromUserWhichDidntBuy := facade listPurchasesOf: objectsFactory anotherUsername withPassword: objectsFactory anotherUserPassword.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchasesFromUserWhichBuyed has: expectedItems andTotalAmount: expectedAmount.
	self assertPurchase: purchasesFromUserWhichDidntBuy has: Bag new andTotalAmount: 0 * peso.! !

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 17:57:10'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 17:57:18'!
anotherUsername
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 17:57:25' prior: 50789016!
anotherUsername
	^ 'Pepe'! !

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 17:57:26'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 17:57:31'!
anotherUserPassword
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 17:57:39' prior: 50789029!
anotherUserPassword
	^ 'ninja'! !

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 17:57:40'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'builders' stamp: 'TCM 11/11/2019 17:58:59' prior: 50784133!
userDatabase
	^ Dictionary 
		with: self username -> self  password
		with: self anotherUsername -> self  anotherUserPassword 
		! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 17:59:01'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 17:59:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 17:59:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 17:59:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 17:59:02'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 17:59:02'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 17:59:02'!
FAILURE!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 18:00:40'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase salesBooks paymentGateway'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:00:40' prior: 50786634!
listPurchasesOf: anUser withPassword: aPassword 
	self assertValidUser: anUser andPassword: aPassword.

	^ salesBooks isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBooks first ]! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:00:40' prior: 50786163!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := OrderedCollection new.
	paymentGateway := aPaymentGateway! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:00:40' prior: 50786817!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	(CashierForSale for: cart registerIn: salesBooks payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:00:48' prior: 50789119!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	paymentGateway := aPaymentGateway! !
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:02:08' prior: 50789149!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 18:02:58' prior: 50789131!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	(CashierForSale for: cart registerIn: salesBooks payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 18:04:07'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase salesBooks paymentGateway cartOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 18:04:06' prior: 50785379!
createCartFor: anUser with: aPassword
	self assertValidUser: anUser andPassword: aPassword.

	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	cartOwner at: nextId put: anUser.
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:04:29' prior: 50789161!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwner := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 18:05:21'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalogue catalog carts nextId usersDatabase salesBooks paymentGateway cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:05:21' prior: 50789204!
createCartFor: anUser with: aPassword
	self assertValidUser: anUser andPassword: aPassword.

	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	cartOwners at: nextId put: anUser.
	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:05:21' prior: 50789215!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 18:06:09' prior: 50789176!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard cartOwner salesBook |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	cartOwner := cartOwners at: aCartId.
	salesBook := salesBooks at: cartOwner.
	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 18:06:17' prior: 50789268!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard cartOwner salesBook |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	cart := carts at: aCartId.

	cartOwner := cartOwners at: aCartId.
	salesBook := salesBooks at: cartOwner.

	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:06:24'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:06:24'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:06:25'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:06:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:06:25'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:06:25'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 18:07:01' prior: 50789109!
listPurchasesOf: anUser withPassword: aPassword 
	| salesBook |
	self assertValidUser: anUser andPassword: aPassword.

	salesBook := salesBooks at: anUser.

	^ salesBooks isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBooks first ]! !
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 18:07:11' prior: 50789353!
listPurchasesOf: anUser withPassword: aPassword 
	| salesBook |
	self assertValidUser: anUser andPassword: aPassword.

	salesBook := salesBooks at: anUser.

	^ salesBook isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBooks first ]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:07:12'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:07:12'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:07:12'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:07:22'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:07:31'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 18:07:38' prior: 50789364!
listPurchasesOf: anUser withPassword: aPassword 
	| salesBook |
	self assertValidUser: anUser andPassword: aPassword.

	salesBook := salesBooks at: anUser.

	^ salesBook isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBook first ]! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:07:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:07:47'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:08:10' prior: 50788977!
test11PurchasesOfDifferentUsersDontGetMixed
	| cartId facade purchasesFromUserWhichBuyed purchasesFromUserWhichDidntBuy expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId.
	purchasesFromUserWhichBuyed := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.
	purchasesFromUserWhichDidntBuy := facade listPurchasesOf: objectsFactory anotherUsername withPassword: objectsFactory anotherUserPassword.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchasesFromUserWhichBuyed has: expectedItems andTotalAmount: expectedAmount.
	self assertPurchase: purchasesFromUserWhichDidntBuy has: Bag new andTotalAmount: 0.! !

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:08:11'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:08:39'!
test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed
	| cartId facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId.
	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!methodRemoval: TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:08:39'!
test10ListPurchasesOfAUserWhoCheckoutedHasTheBooksBuyed
	| cartId facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId.
	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag with: objectsFactory itemSellByStore with: objectsFactory itemSellByStore.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:11:33'!
test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed
	| cartId1 cartId2 facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId1 withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId1.

	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId2 withQuantity: 4 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId2.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag new.
	6 timesRepeat: [ Bag add: objectsFactory itemSellByStore ].
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:12:05' prior: 50789620!
test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed
	| cartId1 cartId2 facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId1 withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId1.

	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId2 withQuantity: 4 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId2.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag new.
	Bag add: objectsFactory itemSellByStore withOccurrences: 6.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:12:07'!
ERROR!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:12:27' prior: 50789653!
test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed
	| cartId1 cartId2 facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId1 withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId1.

	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId2 withQuantity: 4 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId2.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag new.
	expectedItems add: objectsFactory itemSellByStore withOccurrences: 6.
	expectedAmount := 2 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:12:27'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:12:59'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 18:19:47' prior: 50789427!
listPurchasesOf: anUser withPassword: aPassword 
	| salesBook |
	self assertValidUser: anUser andPassword: aPassword.

	salesBook := salesBooks at: anUser.

	^ salesBook isEmpty ifTrue: [ Purchase new ] ifFalse: [ salesBook inject: Purchase new into: [:acc :aPurchase | acc mergeWith: aPurchase] ]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:19:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:19:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:19:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:19:53'!
ERROR!
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/11/2019 18:20:51'!
mergeWith: anotherPurchase
	elements add: anotherPurchase elements! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:20:55'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:20:55'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:20:55'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:20:55'!
ERROR!
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/11/2019 18:21:13' prior: 50789792!
mergeWith: anotherPurchase
	elements addAll: anotherPurchase elements! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:21:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:16'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:16'!
FAILURE!
!TusLibrosRESTFacadeTest methodsFor: 'tests' stamp: 'TCM 11/11/2019 18:21:25' prior: 50789690!
test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed
	| cartId1 cartId2 facade purchases expectedItems expectedAmount |
	facade := objectsFactory facade.

	cartId1 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId1 withQuantity: 2 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId1.

	cartId2 := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId2 withQuantity: 4 of: objectsFactory itemSellByStore.
	self makeCheckoutIn: facade forCartId: cartId2.

	purchases := facade listPurchasesOf: objectsFactory username withPassword: objectsFactory password.

	expectedItems := Bag new.
	expectedItems add: objectsFactory itemSellByStore withOccurrences: 6.
	expectedAmount := 6 * objectsFactory priceOfItemSellByStore .

	self assertPurchase: purchases has: expectedItems andTotalAmount: expectedAmount! !

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:21:28'!
PASSED!
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:22:10' prior: 50779459!
= anotherPurchase
	^ elements = anotherPurchase elements.! !
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:24:21' prior: 50789991!
= anotherPurchase
	| anotherPurchaseElements |
	anotherPurchaseElements := OrderedCollection new.
	anotherPurchase itemsDo: [:anItem | anotherPurchaseElements add: anItem].
	^ elements = anotherPurchaseElements.! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:24:24'!
ERROR!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:24:24'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:24:24'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:24:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:24:31'!
ERROR!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:24:31'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:24:31'!
ERROR!
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:22:10' prior: 50789996!
= anotherPurchase
	^ elements = anotherPurchase elements.! !
!Cart methodsFor: 'price' stamp: 'TCM 11/11/2019 18:33:22'!
totalAmount
	| amount |
	amount := 0.
	^ self itemsDo: [:anItem :aQuantity | amount = (self priceOf: anItem) * aQuantity + amount]! !
!Cart methodsFor: 'price' stamp: 'TCM 11/11/2019 18:33:34' prior: 50790211!
totalAmount
	| amount |
	amount := 0.
	self itemsDo: [:anItem :aQuantity | amount = (self priceOf: anItem) * aQuantity + amount].
	^ amount! !

!classDefinition: #Purchase category: #TusLibros stamp: 'TCM 11/11/2019 18:34:50'!
Object subclass: #Purchase
	instanceVariableNames: 'elements cart totalSpent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Purchase methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:34:47' prior: 50786704!
initializeFor: aCart 
	self initialize.
	
	aCart itemsDo: [  :anItem :aQuantity |
		elements add: (Array with: anItem with: aQuantity)
	].

	totalSpent := aCart totalAmount.! !
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/11/2019 18:35:09' prior: 50786928!
totalSpent
	^ totalSpent! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:35:24'!
ERROR!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:35:24'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:35:24'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:35:25'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:35:25'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:35:25'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:35:25'!
ERROR!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:35:31'!
ERROR!
!Cart methodsFor: 'price' stamp: 'TCM 11/11/2019 18:36:15' prior: 50790218!
totalAmount
	| amount |
	amount := 0.
	self itemsDo: [:anItem :aQuantity | amount := (self priceOf: anItem) * aQuantity + amount].
	^ amount! !

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:36:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:36:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:18'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:36:18'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:18'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:21'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:36:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:52'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:36:52'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:52'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:36:55'!
FAILURE!
!Purchase methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:38:53' prior: 50786699!
initialize
	elements := OrderedCollection new.
	totalSpent := 0! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:38:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:38:56'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:38:56'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:38:56'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:39:00'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:39:37'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:39:37'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:39:37'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:39:37'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:39:39'!
FAILURE!
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/11/2019 18:43:12' prior: 50789846!
mergeWith: anotherPurchase
	elements addAll: anotherPurchase elements.
	totalSpent := totalSpent + anotherPurchase totalSpent! !

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:43:16'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:43:17'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:43:30'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:43:31'!
PASSED!
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:44:13' prior: 50790207!
= anotherPurchase
	^ elements = anotherPurchase elements and: totalSpent = anotherPurchase totalSpent.! !
!Purchase methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:44:30' prior: 50790544!
initialize
	elements := Bag new.
	totalSpent := 0! !
!Purchase methodsFor: 'initialization' stamp: 'TCM 11/11/2019 18:44:44' prior: 50790233!
initializeFor: aCart 
	self initialize.
	
	aCart itemsDo: [  :anItem :aQuantity |
		elements add: anItem withOccurrences: aQuantity
	].

	totalSpent := aCart totalAmount.! !
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:50:24' prior: 50786761!
itemsDo: aBlockClosure 
	elements sortedCounts do: [ :assoc |
		aBlockClosure value: assoc key value: assoc value
	]! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:50:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:50:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:50:29'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:50:29'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:50:29'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:50:32'!
ERROR!
!Purchase methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 18:51:05' prior: 50790849!
itemsDo: aBlockClosure 
	elements sortedCounts do: [ :assoc |
		aBlockClosure value: assoc value value: assoc key
	]! !

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:51:05'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:51:09'!
PASSED!
!Purchase methodsFor: 'accessing' stamp: 'TCM 11/11/2019 18:53:07' prior: 50790655!
mergeWith: anotherPurchase
	anotherPurchase itemsDo: [ :anItem :aQuantity | elements add: anItem withOccurrences: aQuantity ].
	totalSpent := totalSpent + anotherPurchase totalSpent! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:53:10'!
PASSED!
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:54:37' prior: 50790828!
= anotherPurchase

	| anotherPurchaseElements |
	anotherPurchaseElements := Bag new.
	anotherPurchase itemsDo: [ :anItem :aQuantity | anotherPurchaseElements add: anItem withOccurrences: aQuantity ].
	^ elements = anotherPurchaseElements and: totalSpent = anotherPurchase totalSpent.! !
!Purchase methodsFor: 'comparing' stamp: 'TCM 11/11/2019 18:54:45' prior: 50791281!
= anotherPurchase
	| anotherPurchaseElements |
	anotherPurchaseElements := Bag new.
	anotherPurchase itemsDo: [ :anItem :aQuantity | anotherPurchaseElements add: anItem withOccurrences: aQuantity ].
	^ elements = anotherPurchaseElements and: totalSpent = anotherPurchase totalSpent.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:54:49'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:54:50'!
PASSED!

!methodRemoval: Purchase #elements stamp: 'TCM 11/11/2019 18:55:05'!
elements
	^ elements!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 18:55:07'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 18:55:08'!
PASSED!

----SNAPSHOT----(11 November 2019 18:57:02) CuisUniversity-3938.image priorSource: 14630659!

----SNAPSHOT----(11 November 2019 19:06:45) CuisUniversity-3938.image priorSource: 14716261!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/11/2019 19:59:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'gregorianMonthOfYear name number expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'TCM 11/11/2019 19:59:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchase category: #TusLibros stamp: 'TCM 11/11/2019 19:59:44'!
Object subclass: #Purchase
	instanceVariableNames: 'elements totalSpent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 19:59:58'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalog carts nextId usersDatabase salesBooks paymentGateway cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacadeTest methodsFor: 'tests - purchase' stamp: 'TCM 11/11/2019 20:10:32'!
test13CreatingCartAndAddingAfter30MinutesFails! !

!classDefinition: #TimeProvider category: #TusLibros stamp: 'TCM 11/11/2019 20:37:44'!
Object subclass: #TimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacadeTest methodsFor: 'tests - cart expiration' stamp: 'TCM 11/11/2019 20:37:54' prior: 50791572!
test13CreatingCartAndAddingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProvider new.
	facade := objectsFactory facadeWithTime: timeProvider.

	timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	
	facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.
	
	self assert: ((facade listCart: cartId) occurrencesOf: objectsFactory itemSellByStore) equals: 5.! !
!TusLibrosRESTFacadeTest methodsFor: 'tests - cart expiration' stamp: 'TCM 11/11/2019 20:40:57' prior: 50791584!
test13CreatingCartAndAddingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProvider new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.
	
	self assert: (facade listCart: cartId) isEmpty.! !

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:41:02'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:41:20'!
facadeWithTime: aTimeProvider 
	self shouldBeImplemented.! !
!TusLibrosTestObjectsFactory methodsFor: 'other builders' stamp: 'TCM 11/11/2019 20:42:20' prior: 50787987!
facade
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway withTimeProvider: TimeProvider new.! !
!TusLibrosTestObjectsFactory methodsFor: 'other builders' stamp: 'TCM 11/11/2019 20:42:29' prior: 50791633!
facade
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway.! !
!TusLibrosRESTFacade class methodsFor: 'instance creation' stamp: 'TCM 11/11/2019 20:44:09'!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: timeProvider  

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:44:09' prior: 50791642!
facade
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway withTimeProvider: TimeProvider new.! !

!methodRemoval: TusLibrosRESTFacade class #acceptingItemsOf:withUsers:withPaymentGateway: stamp: 'TCM 11/11/2019 20:44:09'!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway 

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway!
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 20:44:38'!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: timeProvider   
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.! !
!TusLibrosRESTFacade class methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:44:38' prior: 50791650!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: timeProvider  

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: timeProvider! !

!methodRemoval: TusLibrosRESTFacade #initializeAcceptingItemsOf:withUsers:withPaymentGateway: stamp: 'TCM 11/11/2019 20:44:38'!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway  
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.!
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 20:45:01' prior: 50791680!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: aTimeProvider   
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.! !

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 20:45:04'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalog carts nextId usersDatabase salesBooks paymentGateway cartOwners timeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 20:45:03' prior: 50791725!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: aTimeProvider   
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.
	timeProvider := aTimeProvider ! !
!TusLibrosRESTFacade class methodsFor: 'instance creation' stamp: 'TCM 11/11/2019 20:45:12' prior: 50791697!
acceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: aTimeProvider  

	^self new initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: aTimeProvider! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 20:45:33'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:45:33'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:45:33'!
ERROR!
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:45:51' prior: 50791627!
facadeWithTime: aTimeProvider
^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway withTimeProvider: aTimeProvider! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:45:54' prior: 50791839!
facadeWithTime: aTimeProvider
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway withTimeProvider: aTimeProvider! !

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:45:59'!
ERROR!
!TimeProvider methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:46:12'!
advance: aDuration 
	self shouldBeImplemented.! !

!classDefinition: #TimeProvider category: #TusLibros stamp: 'TCM 11/11/2019 20:46:41'!
Object subclass: #TimeProvider
	instanceVariableNames: 'currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeProvider methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:46:39' prior: 50791862!
advance: aDuration 
	currentTime := currentTime + aDuration! !
!TimeProvider methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:47:20'!
initialize
	currentTime := DateAndTime now.! !

| time |
time := DateAndTime now.!

time := DateAndTime now.!

time := DateAndTime now.!

time := DateAndTime now.!

time := DateAndTime now.!

time := DateAndTime now.!

time!

time!

time!

time!

time + Duration minutes: 5.!

time + (Duration minutes: 5).!
!TimeProvider methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 20:49:57'!
now
	^ currentTime ! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 20:50:44'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:50:44'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:50:44'!
ERROR!
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/11/2019 20:51:03'!
cartExpiredErrorMessage
	self shouldBeImplemented.! !
!TusLibrosRESTFacade class methodsFor: 'error messages' stamp: 'TCM 11/11/2019 20:51:12' prior: 50791952!
cartExpiredErrorMessage
	^ 'El carrito expiro'! !

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 20:51:14'!
FAILURE!

!classDefinition: #TusLibrosRESTFacade category: #TusLibros stamp: 'TCM 11/11/2019 20:52:50'!
Object subclass: #TusLibrosRESTFacade
	instanceVariableNames: 'catalog carts nextId usersDatabase salesBooks paymentGateway cartOwners timeProvider cartLastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 20:52:49' prior: 50789241!
createCartFor: anUser with: aPassword
	self assertValidUser: anUser andPassword: aPassword.

	carts at: nextId put: (Cart acceptingItemsOf: catalog).
	cartOwners at: nextId put: anUser.
	cartLastTimeUsed at: nextId put: timeProvider now.

	nextId := nextId + 1 .
	^ nextId - 1! !
!TusLibrosRESTFacade methodsFor: 'initialization' stamp: 'TCM 11/11/2019 20:53:09' prior: 50791752!
initializeAcceptingItemsOf: aCatalog withUsers: anUsersDatabase withPaymentGateway: aPaymentGateway withTimeProvider: aTimeProvider   
	catalog := aCatalog.
	carts := Dictionary new.
	cartOwners := Dictionary new.
	cartLastTimeUsed := Dictionary new.
	nextId := 0.
	usersDatabase := anUsersDatabase.
	salesBooks := Dictionary new.
	usersDatabase keysDo: [ :anUsername | salesBooks at: anUsername put: OrderedCollection new].
	paymentGateway := aPaymentGateway.
	timeProvider := aTimeProvider.! !

| time |
time := DateAndTime now.!

time - DateAndTime now!


time dist: DateAndTime now!

time - (DateAndTime now)!

time := DateAndTime now!

time - (DateAndTime now)!

time - (DateAndTime now)!

time - (DateAndTime now)!

(time - (DateAndTime now)) minutes !

(time - (DateAndTime now)) minutes !

(time - (DateAndTime now)) second!

(time - (DateAndTime now)) seconds!

(DateAndTime now - time) seconds!

(DateAndTime now - time) seconds!

(DateAndTime now - time) seconds!

(DateAndTime now - time) minutes!

(DateAndTime now - time) minute!

(DateAndTime now - time) totalMinutes!

(DateAndTime now - time) totalSeconds!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:00:49' prior: 50784078!
addToCart: aCartId withQuantity: aQuantity of: anItem
	(cartLastTimeUsed - timeProvider now) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	(carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ]) add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:00:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:00:53'!
ERROR!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:01:04'!
ERROR!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:01:28' prior: 50792028!
addToCart: aCartId withQuantity: aQuantity of: anItem
	((cartLastTimeUsed at: aCartId) - timeProvider now) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	(carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ]) add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:01:29'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:01:30'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:01:30'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:01:30'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:01:59'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:03:04' prior: 50792097!
addToCart: aCartId withQuantity: aQuantity of: anItem
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	(carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ]) add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:03:06'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:03:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:03:08'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:03:08'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:03:53' prior: 50792171!
addToCart: aCartId withQuantity: aQuantity of: anItem
	(timeProvider now - (cartLastTimeUsed at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ])) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	(carts at: aCartId) add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:03:56'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests - cart expiration' stamp: 'TCM 11/11/2019 21:04:45' prior: 50791602!
test13CreatingCartAndAddingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProvider new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:04:54'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:04:56'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests - cart expiration' stamp: 'TCM 11/11/2019 21:05:37'!
test14CreatingCartAndListingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProvider new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:05:41'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:06:06' prior: 50783841!
listCart: aCartId 
	| items cart |
	(timeProvider now - (cartLastTimeUsed at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ])) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	items := Bag new.
	
	cart := carts at: aCartId.	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:06:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:06:11'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:07:02' prior: 50792244!
addToCart: aCartId withQuantity: aQuantity of: anItem
	| cart |
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	(carts at: aCartId) add: aQuantity of: anItem! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:07:13' prior: 50792605!
addToCart: aCartId withQuantity: aQuantity of: anItem
	| cart |
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	cart add: aQuantity of: anItem! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:14'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:18'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:07:39' prior: 50792412!
listCart: aCartId 
	| items cart |
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	items := Bag new.
	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:07:40'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests - cart expiration' stamp: 'TCM 11/11/2019 21:10:19'!
test15CheckoutAfter30MinutesWithoutUsingCartFails
	| cartId facade timeProvider |
	timeProvider := TimeProvider new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [ self makeCheckoutIn: facade forCartId: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:10:21'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:10:27'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:10:32'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:11:50' prior: 50789289!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard cartOwner salesBook |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	
	cart := carts at: aCartId.
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].

	cartOwner := cartOwners at: aCartId.
	salesBook := salesBooks at: cartOwner.

	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:11:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:11:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:11:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:11:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:11:53'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'tests - purchase' stamp: 'TCM 11/11/2019 21:16:42'!
test12dot5CannotCheckoutACartWhichDoesNotExist
	| facade |
	facade := objectsFactory facade.

	self
		should: [ self makeCheckoutIn: facade forCartId: objectsFactory invalidCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade invalidadCredentialsErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:16:49'!
FAILURE!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:17:10' prior: 50792850!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard cartOwner salesBook |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.
	
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ].
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].

	cartOwner := cartOwners at: aCartId.
	salesBook := salesBooks at: cartOwner.

	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:17:11'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:17:11'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:17:11'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:17:38'!
FAILURE!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:17:38'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:17:38'!
FAILURE!
!TusLibrosRESTFacadeTest methodsFor: 'tests - purchase' stamp: 'TCM 11/11/2019 21:18:12' prior: 50792935!
test12dot5CannotCheckoutACartWhichDoesNotExist
	| facade |
	facade := objectsFactory facade.

	self
		should: [ self makeCheckoutIn: facade forCartId: objectsFactory invalidCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartDoesNotExistErrorMessage.! !

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:18:13'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:18:59'!
cartById: aCartId

	^ carts at: aCartId ifAbsent: [ self error: self class cartDoesNotExistErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:18:59' prior: 50792619!
addToCart: aCartId withQuantity: aQuantity of: anItem
	| cart |
	cart := self cartById: aCartId.
	(timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ].
	cart add: aQuantity of: anItem! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:19:51'!
assertCartNotExpired: aCartId

	^ (timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:19:51' prior: 50793203!
addToCart: aCartId withQuantity: aQuantity of: anItem
	| cart |
	cart := self cartById: aCartId.
	self assertCartNotExpired: aCartId.
	cart add: aQuantity of: anItem! !
!TusLibrosRESTFacade methodsFor: 'assertions' stamp: 'TCM 11/11/2019 21:20:53'!
minutesSinceLastUse: aCartId

	^ (timeProvider now - (cartLastTimeUsed at: aCartId)) totalMinutes! !
!TusLibrosRESTFacade methodsFor: 'assertions' stamp: 'TCM 11/11/2019 21:20:53' prior: 50793214!
assertCartNotExpired: aCartId

	^ (self minutesSinceLastUse: aCartId) >= 30 ifTrue: [ self error: self class cartExpiredErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'assertions' stamp: 'TCM 11/11/2019 21:21:16' prior: 50793238!
assertCartNotExpired: aCartId

	(self minutesSinceLastUse: aCartId) >= 30
		ifTrue: [ self error: self class cartExpiredErrorMessage ]! !
!TusLibrosRESTFacade methodsFor: 'assertions' stamp: 'TCM 11/11/2019 21:21:27' prior: 50785370!
assertValidUser: anUser andPassword: aPassword

	(self areValidUser: anUser andPassword: aPassword)
		ifFalse: [ self error: self class invalidadCredentialsErrorMessage ]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:21:28'!
PASSED!
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:22:54' prior: 50792952!
checkoutCart: aCartId withCreditCardNumber: aCreditCardNumber creditCardExpiration: anExpirationDate creditCardOwner: aCreditCardOwner onDate: aDate  

	| cart creditCard cartOwner salesBook |
	creditCard := CreditCard withNumber: aCreditCardNumber expirationDate: anExpirationDate holderName: aCreditCardOwner.

	cart := self cartById: aCartId.
	self assertCartNotExpired: aCartId.

	cartOwner := cartOwners at: aCartId.
	salesBook := salesBooks at: cartOwner.

	(CashierForSale for: cart registerIn: salesBook payingWith: creditCard onDate: aDate withPaymentGateway: paymentGateway) checkout! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:23:08' prior: 50792745!
listCart: aCartId 
	| items cart |
	cart := self cartById: aCartId.
	self assertCartNotExpired: aCartId.
	items := Bag new.
	
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !
!TusLibrosRESTFacade methodsFor: 'cart interacting' stamp: 'TCM 11/11/2019 21:23:19' prior: 50793349!
listCart: aCartId 
	| items cart |
	cart := self cartById: aCartId.
	self assertCartNotExpired: aCartId.

	items := Bag new.
	cart itemsDo: [ :anItem :aQuantity |
		items add: anItem withOccurrences: aQuantity.
	].
	^ items! !
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 21:24:35'!
mergedPurchasesOf: salesBook

	^ salesBook inject: Purchase new into: [:acc :aPurchase | acc mergeWith: aPurchase]! !
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 21:24:35' prior: 50789732!
listPurchasesOf: anUser withPassword: aPassword 
	| salesBook |
	self assertValidUser: anUser andPassword: aPassword.

	salesBook := salesBooks at: anUser.

	^ salesBook isEmpty ifTrue: [ Purchase new ] ifFalse: [ self mergedPurchasesOf: salesBook ]! !
!TusLibrosRESTFacade methodsFor: 'purchases' stamp: 'TCM 11/11/2019 21:24:45' prior: 50793370!
mergedPurchasesOf: aSalesBook

	^ aSalesBook inject: Purchase new into: [:acc :aPurchase | acc mergeWith: aPurchase]! !

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:24:59'!
PASSED!
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 21:25:44' prior: 50792817!
test15CheckoutAfter30MinutesWithoutUsingCartFails
	| cartId facade timeProvider |
	timeProvider := TimeProviderSimulator new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.
	facade addToCart: cartId withQuantity: 2 of: objectsFactory itemSellByStore.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [ self makeCheckoutIn: facade forCartId: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 21:25:44' prior: 50792310!
test13CreatingCartAndAddingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProviderSimulator new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [facade addToCart: cartId withQuantity: 5 of: objectsFactory itemSellByStore.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !
!TusLibrosRESTFacadeTest methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 21:25:44' prior: 50792390!
test14CreatingCartAndListingAfter30MinutesFails
	| cartId facade timeProvider |
	timeProvider := TimeProviderSimulator new.
	facade := objectsFactory facadeWithTime: timeProvider.

	cartId := facade createCartFor: objectsFactory username with: objectsFactory password.

	timeProvider advance: (Duration minutes: 30).

	self
		should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosRESTFacade cartExpiredErrorMessage.! !
!TusLibrosTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'TCM 11/11/2019 21:25:44' prior: 50791661!
facade
	^ TusLibrosRESTFacade acceptingItemsOf: self catalog withUsers: self userDatabase withPaymentGateway: self dummyPaymentGateway withTimeProvider: TimeProviderSimulator new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test09ItemsDoOfCardWithITemsVisitsThem stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CartTest #test10ItemsDoOfEmptyCartDoesNothing stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test01EmptyCartCannotCheckout stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test02CreditCardCreationWithInvalidNumberFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test03CreditCardCreationWithLettersFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test04CreditCardCreationWithNotOnlyLettersFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test05IsExpiredOnExpiredCardReturnsTrue stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test06IsExpiredOnNotExpiredCardReturnsFalse stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test07CheckoutWithExpiredCardFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test08CartWithItemsIsCheckedOutSuccesfully stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #CashierForSaleTest #test09IfMerchantProcessorFailsThePurcharseIsNotDone stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test01AfterCreationOFACartForValidUserListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test02AfterAddingAnItemToACartListCartWithThatIdIsEmpty stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test03CannotListNonExistantCart stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test04AddingItemsToACartDoesNotChangeAnotherCart stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test05CannotAddToNonExistantCart stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test06CannotCreateCartWithInvalidUser stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test07CannotCreateCartWithValidUserButInvalidPassword stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test08ListPurchasesForUserWhichDidntCheckoutYetIsEmpty stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test09CannotListPurchasesWithInvalidCredentials stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test10ListPurchasesOfAUserWhoCheckoutedOnceHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test11PurchasesOfDifferentUsersDontGetMixed stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12ListPurchasesOfAUserWhoCheckoutedManyTimesHasTheBooksBuyed stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test12dot5CannotCheckoutACartWhichDoesNotExist stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test13CreatingCartAndAddingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test14CreatingCartAndListingAfter30MinutesFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

!testRun: #TusLibrosRESTFacadeTest #test15CheckoutAfter30MinutesWithoutUsingCartFails stamp: 'TCM 11/11/2019 21:25:52'!
PASSED!

----SNAPSHOT----(11 November 2019 21:26:05) CuisUniversity-3938.image priorSource: 14716355!